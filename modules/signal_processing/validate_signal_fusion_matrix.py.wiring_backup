# <!-- @GENESIS_MODULE_START: validate_signal_fusion_matrix -->

from datetime import datetime\nfrom event_bus import EventBus
#!/usr/bin/env python3
"""
üß™ GENESIS Phase 34: Signal Fusion Matrix Validation Test v1.0.0
ARCHITECT MODE COMPLIANT | SYSTEM INTEGRATION TEST

This test validates the SignalFusionMatrix module registration and basic functionality.
"""

import os
import sys
import json
import time
from pathlib import Path

# Add project root to Python path
sys.path.append(str(Path(__file__).parent))

def test_signal_fusion_matrix_registration():
    """Test that SignalFusionMatrix is properly registered in all system files"""
    print("üîç Testing SignalFusionMatrix system registration...")
    
    results = {
        "module_exists": False,
        "build_status_registered": False,
        "module_registry_registered": False,
        "system_tree_registered": False,
        "event_bus_registered": False,
        "telemetry_registered": False
    }
    
    # Test 1: Module file exists
    if os.path.exists("signal_fusion_matrix.py"):
        results["module_exists"] = True
        print("‚úÖ signal_fusion_matrix.py exists")
    else:
        print("‚ùå signal_fusion_matrix.py not found")
        return results
    
    # Test 2: Check build_status.json
    try:
        with open("build_status.json", "r") as f:
            build_status = json.load(f)
            if "phase_34" in build_status and "SignalFusionMatrix" in str(build_status):
                results["build_status_registered"] = True
                print("‚úÖ SignalFusionMatrix registered in build_status.json")
            else:
                print("‚ùå SignalFusionMatrix not found in build_status.json")
    except Exception as e:
        print(f"‚ùå Error reading build_status.json: {e}")
    
    # Test 3: Check module_registry.json  
    try:
        with open("module_registry.json", "r") as f:
            module_registry = json.load(f)
            module_names = [m.get("name", "") for m in module_registry.get("modules", [])]
            if "SignalFusionMatrix" in module_names:
                results["module_registry_registered"] = True
                print("‚úÖ SignalFusionMatrix registered in module_registry.json")
            else:
                print("‚ùå SignalFusionMatrix not found in module_registry.json")
    except Exception as e:
        print(f"‚ùå Error reading module_registry.json: {e}")
    
    # Test 4: Check system_tree.json
    try:
        with open("system_tree.json", "r") as f:
            system_tree = json.load(f)
            node_ids = [n.get("id", "") for n in system_tree.get("nodes", [])]
            if "SignalFusionMatrix" in node_ids:
                results["system_tree_registered"] = True
                print("‚úÖ SignalFusionMatrix registered in system_tree.json")
            else:
                print("‚ùå SignalFusionMatrix not found in system_tree.json")
    except Exception as e:
        print(f"‚ùå Error reading system_tree.json: {e}")
    
    # Test 5: Check event_bus.json
    try:
        with open("event_bus.json", "r") as f:
            event_bus = json.load(f)
            if "phase_34_signal_fusion_matrix_routes_added" in event_bus.get("metadata", {}):
                results["event_bus_registered"] = True
                print("‚úÖ SignalFusionMatrix routes registered in event_bus.json")
            else:
                print("‚ùå SignalFusionMatrix routes not found in event_bus.json")
    except Exception as e:
        print(f"‚ùå Error reading event_bus.json: {e}")
    
    # Test 6: Check telemetry.json
    try:
        with open("telemetry.json", "r") as f:
            telemetry = json.load(f)
            telemetry_str = str(telemetry)
            if "fusion_matrix" in telemetry_str:
                results["telemetry_registered"] = True
                print("‚úÖ SignalFusionMatrix telemetry registered in telemetry.json")
            else:
                print("‚ùå SignalFusionMatrix telemetry not found in telemetry.json")
    except Exception as e:
        print(f"‚ùå Error reading telemetry.json: {e}")
    
    return results

def test_signal_fusion_matrix_import():
    """Test that SignalFusionMatrix can be imported successfully"""
    print("\nüîç Testing SignalFusionMatrix import...")
    
    try:
        from signal_fusion_matrix import SignalFusionMatrix, MultiStrategySignal, WeightVector, FusedSignal
        print("‚úÖ Successfully imported SignalFusionMatrix classes")
        
        # Test instantiation
        fusion_matrix = SignalFusionMatrix()
        print("‚úÖ Successfully instantiated SignalFusionMatrix")
        
        # Test basic attributes
        if hasattr(fusion_matrix, 'event_bus'):
            print("‚úÖ SignalFusionMatrix has event_bus attribute")
        if hasattr(fusion_matrix, 'signal_buffer'):
            print("‚úÖ SignalFusionMatrix has signal_buffer attribute")
        if hasattr(fusion_matrix, 'weight_vectors'):
            print("‚úÖ SignalFusionMatrix has weight_vectors attribute")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        return False

def test_signal_fusion_matrix_basic_functionality():
    """Test basic SignalFusionMatrix functionality"""
    print("\nüîç Testing SignalFusionMatrix basic functionality...")
    
    try:
        from signal_fusion_matrix import SignalFusionMatrix, MultiStrategySignal
        
        # Create instance
        fusion_matrix = SignalFusionMatrix()
        
        # Test start/stop
        fusion_matrix.start()
        print("‚úÖ SignalFusionMatrix started successfully")
        
        time.sleep(0.1)  # Allow initialization
        
        fusion_matrix.stop()
        print("‚úÖ SignalFusionMatrix stopped successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Functionality test error: {e}")
        return False

def run_validation_suite():
    """Run the complete validation suite"""
    print("üöÄ GENESIS PHASE 34: SIGNAL FUSION MATRIX VALIDATION")
    print("=" * 60)
    print("üîê ARCHITECT MODE COMPLIANT | SYSTEM INTEGRATION TEST")
    print("=" * 60)
    
    # Test 1: Registration
    print("\nüìã TEST 1: SYSTEM REGISTRATION")
    print("-" * 40)
    registration_results = test_signal_fusion_matrix_registration()
    registration_passed = all(registration_results.values())
    
    # Test 2: Import
    print("\nüì¶ TEST 2: MODULE IMPORT")
    print("-" * 40)
    import_passed = test_signal_fusion_matrix_import()
    
    # Test 3: Basic functionality
    print("\n‚öôÔ∏è TEST 3: BASIC FUNCTIONALITY")
    print("-" * 40)
    functionality_passed = test_signal_fusion_matrix_basic_functionality()
    
    # Overall results
    print("\n" + "=" * 60)
    print("üìä VALIDATION RESULTS SUMMARY")
    print("=" * 60)
    
    total_tests = 3
    passed_tests = sum([registration_passed, import_passed, functionality_passed])
    
    print(f"‚úÖ Registration Test: {'PASSED' if registration_passed else 'FAILED'}")
    print(f"‚úÖ Import Test: {'PASSED' if import_passed else 'FAILED'}")
    print(f"‚úÖ Functionality Test: {'PASSED' if functionality_passed else 'FAILED'}")
    print(f"\nüìà Overall Score: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("\nüéâ ALL VALIDATION TESTS PASSED")
        print("‚úÖ Phase 34 SignalFusionMatrix is ready for production")
        return True
    else:
        print("\n‚ö†Ô∏è SOME VALIDATION TESTS FAILED")
        print("üîß Phase 34 SignalFusionMatrix requires fixes")
        return False

if __name__ == "__main__":
    success = run_validation_suite()
    sys.exit(0 if success else 1)


# <!-- @GENESIS_MODULE_END: validate_signal_fusion_matrix -->