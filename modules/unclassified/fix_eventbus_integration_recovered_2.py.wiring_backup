# <!-- @GENESIS_MODULE_START: fix_eventbus_integration -->

from datetime import datetime\n"""
GENESIS AI TRADING SYSTEM - PHASE 20
EventBus Integration Fix for Phase 19 Modules
ARCHITECT MODE v3.0 - ZERO TOLERANCE COMPLIANCE

PURPOSE:
- Fix EventBus import and usage patterns in all Phase 19 modules
- Ensure all modules use get_event_bus, emit_event, subscribe_to_event
- Validate proper EventBus integration compliance
"""

import os
import re
from pathlib import Path

class EventBusIntegrationFixer:
    def __init__(self):
        self.workspace = Path("c:/Users/patra/Genesis FINAL TRY")
        self.target_files = [
            "contextual_execution_router.py",
            "signal_historical_telemetry_linker.py"
        ]
    
    
        # GENESIS Phase 91 Telemetry Injection
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", {
                "module": __name__,
                "status": "running",
                "timestamp": datetime.now().isoformat(),
                "phase": "91_telemetry_enforcement"
            })
        def fix_all_modules(self):
        """Fix EventBus integration in all target modules."""
        print("üîß Fixing EventBus integration in Phase 19 modules...")
        
        for file_name in self.target_files:
            file_path = self.workspace / file_name
            
            if not file_path.exists():
                print(f"‚ùå File not found: {file_name}")
                continue
                
            print(f"üîß Fixing {file_name}...")
            self._fix_file_eventbus_integration(file_path)
            print(f"‚úÖ Fixed {file_name}")
    
    def _fix_file_eventbus_integration(self, file_path):
        """Fix EventBus integration patterns in a single file."""
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Fix import statement
        content = re.sub(
            r'from event_bus import EventBus',
            'from event_bus import get_event_bus, emit_event, subscribe_to_event',
            content
        )
        
        # Fix EventBus instantiation
        content = re.sub(
            r'self\.event_bus = EventBus\(\)',
            'self.event_bus = get_event_bus()',
            content
        )
        
        # Fix emit calls
        content = re.sub(
            r'self\.event_bus\.emit\("([^"]+)"',
            r'emit_event("\1"',
            content
        )
        
        # Fix subscribe calls
        content = re.sub(
            r'self\.event_bus\.subscribe\("([^"]+)", ([^)]+)\)',
            r'subscribe_to_event("\1", \2)',
            content
        )
        
        # Write fixed content back
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)

if __name__ == "__main__":
    fixer = EventBusIntegrationFixer()
    fixer.fix_all_modules()
    print("‚úÖ EventBus integration fixes completed")

    def log_state(self):
        """Phase 91 Telemetry Enforcer - Log current module state"""
        state_data = {
            "module": __name__,
            "timestamp": datetime.now().isoformat(),
            "status": "active",
            "phase": "91_telemetry_enforcement"
        }
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", state_data)
        return state_data
        

# <!-- @GENESIS_MODULE_END: fix_eventbus_integration -->