"""
# <!-- @GENESIS_MODULE_START: omega_system_reconstruction -->

üî• GENESIS SYSTEM RECONSTRUCTION ENGINE
Phase Œ©-TOPOLOGY: Post-Duplicate Recovery System Rebuild

PURPOSE:
Rebuild system topology after duplicate resolution
Ensure all remaining modules are connected via EventBus
Validate telemetry hooks and MT5 integration
"""

import os
import json
import re
from datetime import datetime
from pathlib import Path

def rebuild_system_topology():
    """
    Rebuild the complete GENESIS system topology after duplicate cleanup
    """    print("üîÑ REBUILDING GENESIS SYSTEM TOPOLOGY...")
    
    workspace_path = Path("c:/Users/patra/Genesis FINAL TRY")
    
    # Find all remaining .py files (not quarantined, only GENESIS modules)
    remaining_files = []
    for root, dirs, files in os.walk(workspace_path):
        # Skip quarantine directory and virtual environment
        if "quarantine" in str(root) or ".venv" in str(root) or "__pycache__" in str(root):
            continue
        for file in files:
            if file.endswith(".py") and not file.startswith("_") and "genesis" in file.lower():
                file_path = Path(root) / file
                remaining_files.append(str(file_path))
    
    print(f"üìä Found {len(remaining_files)} remaining Python modules")
    
    # Analyze each module for MT5, telemetry, and EventBus integration
    system_modules = {}
    registered_modules = {}
    unconnected_modules = []
      for file_path in remaining_files:
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            module_name = Path(file_path).stem
            
            # Score module for system integration
            mt5_score = len(re.findall(r'MetaTrader5\.|mt5\.|symbol_info_tick', content))
            telemetry_score = len(re.findall(r'emit_telemetry\(|log_metric\(|track_event\(', content))
            eventbus_score = len(re.findall(r'emit\(|subscribe_to_event\(|register_route\(', content))
            
            integration_score = mt5_score + telemetry_score + eventbus_score
            
            system_modules[module_name] = {
                "file_path": str(file_path),
                "mt5_integration": mt5_score > 0,
                "telemetry_active": telemetry_score > 0,
                "eventbus_connected": eventbus_score > 0,
                "integration_score": integration_score,
                "size": len(content)
            }
            
            # Mark as registered if properly integrated
            if integration_score >= 2:
                registered_modules[module_name] = system_modules[module_name]
            else:
                unconnected_modules.append(module_name)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error analyzing {file_path}: {e}")
    
    # Build new system_tree.json
    system_tree = {
        "genesis_system": {
            "version": "v6.1.0-omega",
            "last_rebuild": datetime.now().isoformat(),
            "total_modules": len(system_modules),
            "registered_modules": len(registered_modules),
            "unconnected_modules": len(unconnected_modules),
            "architecture": "event_driven",
            "data_source": "mt5_live_only"
        },
        "core_engines": {},
        "execution_layer": {},
        "monitoring_systems": {},
        "telemetry_nodes": {},
        "eventbus_routes": {}
    }
    
    # Categorize modules by functionality
    for module_name, module_data in registered_modules.items():
        if "engine" in module_name.lower():
            system_tree["core_engines"][module_name] = module_data
        elif "execution" in module_name.lower() or "executor" in module_name.lower():
            system_tree["execution_layer"][module_name] = module_data
        elif "monitor" in module_name.lower() or "watch" in module_name.lower():
            system_tree["monitoring_systems"][module_name] = module_data
        elif "telemetry" in module_name.lower() or "metric" in module_name.lower():
            system_tree["telemetry_nodes"][module_name] = module_data
        else:
            system_tree["eventbus_routes"][module_name] = module_data
    
    # Write system_tree.json
    with open("system_tree.json", "w") as f:
        json.dump(system_tree, f, indent=2)
    
    # Rebuild module_registry.json
    module_registry = {
        "registry_version": "v6.1.0-omega",
        "last_updated": datetime.now().isoformat(),
        "registered_modules": {}
    }
    
    for module_name, module_data in registered_modules.items():
        module_registry["registered_modules"][module_name] = {
            "uuid": f"genesis-{hash(module_name) % 100000}",
            "status": "active",
            "integration_score": module_data["integration_score"],
            "file_path": module_data["file_path"]
        }
    
    with open("module_registry.json", "w") as f:
        json.dump(module_registry, f, indent=2)
    
    # Rebuild telemetry.json
    telemetry_config = {
        "telemetry_version": "v6.1.0-omega",
        "active_nodes": [],
        "real_time_metrics": True,
        "mt5_data_only": True
    }
    
    for module_name, module_data in registered_modules.items():
        if module_data["telemetry_active"]:
            telemetry_config["active_nodes"].append({
                "module": module_name,
                "metrics_endpoint": f"/telemetry/{module_name}",
                "frequency": "real_time"
            })
    
    with open("telemetry.json", "w") as f:
        json.dump(telemetry_config, f, indent=2)
    
    # Rebuild event_bus.json
    event_bus = {
        "bus_version": "v6.1.0-omega",
        "architecture": "publish_subscribe",
        "routes": {},
        "subscribers": {}
    }
    
    for module_name, module_data in registered_modules.items():
        if module_data["eventbus_connected"]:
            event_bus["routes"][f"{module_name}_events"] = {
                "publisher": module_name,
                "topic": f"genesis.{module_name}",
                "subscribers": []
            }
    
    with open("event_bus.json", "w") as f:
        json.dump(event_bus, f, indent=2)
    
    # Update build_status.json
    build_status = {
        "build_version": "v6.1.0-omega",
        "last_build": datetime.now().isoformat(),
        "status": "SYSTEM_RECONSTRUCTED",
        "phase": "OMEGA_DUPLICATE_RECOVERY_COMPLETE",
        "modules_active": len(registered_modules),
        "modules_quarantined": len(unconnected_modules),
        "architecture_compliance": "ENFORCED",
        "data_integrity": "MT5_LIVE_ONLY",
        "duplicate_resolution": "COMPLETE"
    }
    
    with open("build_status.json", "w") as f:
        json.dump(build_status, f, indent=2)
      # Log to build_tracker.md
    with open("build_tracker.md", "a", encoding='utf-8') as f:
        f.write(f"\n\n## SYSTEM RECONSTRUCTION - {datetime.now().isoformat()}\n")
        f.write(f"**Phase**: OMEGA_DUPLICATE_RECOVERY_COMPLETE\n")
        f.write(f"**Active Modules**: {len(registered_modules)}\n")
        f.write(f"**Quarantined Modules**: {len(unconnected_modules)}\n")
        f.write(f"**Architecture**: Event-Driven, MT5-Only\n")
        f.write(f"**Status**: SYSTEM_TOPOLOGY_REBUILT\n")
    
    print(f"‚úÖ SYSTEM RECONSTRUCTION COMPLETE!")
    print(f"üìä {len(registered_modules)} modules active")
    print(f"‚ö†Ô∏è {len(unconnected_modules)} modules need integration")
    
    return system_tree, registered_modules, unconnected_modules

if __name__ == "__main__":
    rebuild_system_topology()

# <!-- @GENESIS_MODULE_END: omega_system_reconstruction -->
