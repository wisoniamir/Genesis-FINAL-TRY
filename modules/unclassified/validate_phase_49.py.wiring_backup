# <!-- @GENESIS_MODULE_START: validate_phase_49 -->

from datetime import datetime\n#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Validate Phase 49 Performance Loop Hardening implementation
"""

from event_bus import EventBus

import json
import sys
import os

class TermColors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def load_json_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return json.load(file)
    except Exception as e:
        print(f"{TermColors.FAIL}ERROR: Failed to load {file_path}: {str(e)}{TermColors.ENDC}")
        raise RuntimeError("ARCHITECT_MODE_COMPLIANCE: Operation failed")

def validate_phase49():
    print(f"{TermColors.HEADER}╔════════════════════════════════════════════════════════╗{TermColors.ENDC}")
    print(f"{TermColors.HEADER}║     Phase 49 Performance Loop Hardening Validation     ║{TermColors.ENDC}")
    print(f"{TermColors.HEADER}╚════════════════════════════════════════════════════════╝{TermColors.ENDC}")
    
    # Define required files
    required_files = [
        'loop_integrity_report.json',
        'mutation_drift_index.json',
        'execution_loop_config.json',
        'event_bus.json',
        'telemetry.json'
    ]
    
    # Check if all required files exist
    all_files_exist = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"{TermColors.GREEN}✓ File exists: {file_path}{TermColors.ENDC}")
        else:
            all_files_exist = False
            print(f"{TermColors.FAIL}✗ File missing: {file_path}{TermColors.ENDC}")
    
    if not all_files_exist:
        print(f"{TermColors.FAIL}Validation failed: Not all required files exist{TermColors.ENDC}")
        return False
    
    # Load all files
    files_data = {}
    for file_path in required_files:
        files_data[file_path] = load_json_file(file_path)
        if not files_data[file_path]:
            print(f"{TermColors.FAIL}Validation failed: Could not load {file_path}{TermColors.ENDC}")
            return False
    
    # Validate event_bus.json contains live_execution_loop route
    event_bus = files_data['event_bus.json']
    has_execution_loop = False
    for route in event_bus.get("routes", []):
        if route.get("topic") == "live_execution_loop":
            has_execution_loop = True
            print(f"{TermColors.GREEN}✓ event_bus.json contains live_execution_loop route{TermColors.ENDC}")
            break
    
    if not has_execution_loop:
        print(f"{TermColors.FAIL}✗ event_bus.json does not contain live_execution_loop route{TermColors.ENDC}")
        return False
    
    # Validate telemetry.json contains required metrics
    telemetry = files_data['telemetry.json']
    required_metrics = [
        'loop_execution_latency_ms',
        'mt5_data_poll_latency',
        'signal_dispatch_timing_accuracy',
        'mutation_drift_index'
    ]
    
    if "metrics" not in telemetry:
        print(f"{TermColors.FAIL}✗ telemetry.json does not contain metrics section{TermColors.ENDC}")
        return False
    
    metrics_valid = True
    for metric in required_metrics:
        if metric in telemetry["metrics"]:
            print(f"{TermColors.GREEN}✓ telemetry.json contains metric: {metric}{TermColors.ENDC}")
        else:
            metrics_valid = False
            print(f"{TermColors.FAIL}✗ telemetry.json missing metric: {metric}{TermColors.ENDC}")
    
    if not metrics_valid:
        print(f"{TermColors.FAIL}Validation failed: Not all required metrics are present{TermColors.ENDC}")
        return False
    
    # Validate execution_loop_config.json
    loop_config = files_data['execution_loop_config.json']
    required_config_keys = [
        'min_latency_ms',
        'max_latency_ms',
        'sync_strategy',
        'fallback'
    ]
    
    config_valid = True
    for key in required_config_keys:
        if key in loop_config:
            print(f"{TermColors.GREEN}✓ execution_loop_config.json contains key: {key}{TermColors.ENDC}")
        else:
            config_valid = False
            print(f"{TermColors.FAIL}✗ execution_loop_config.json missing key: {key}{TermColors.ENDC}")
    
    if not config_valid:
        print(f"{TermColors.FAIL}Validation failed: execution_loop_config.json missing required keys{TermColors.ENDC}")
        return False
    
    # Validate loop_integrity_report.json
    loop_report = files_data['loop_integrity_report.json']
    required_report_keys = [
        'drift_index',
        'avg_latency',
        'max_latency',
        'min_latency'
    ]
    
    report_valid = True
    for key in required_report_keys:
        if key in loop_report:
            print(f"{TermColors.GREEN}✓ loop_integrity_report.json contains key: {key}{TermColors.ENDC}")
        else:
            report_valid = False
            print(f"{TermColors.FAIL}✗ loop_integrity_report.json missing key: {key}{TermColors.ENDC}")
    
    if not report_valid:
        print(f"{TermColors.FAIL}Validation failed: loop_integrity_report.json missing required keys{TermColors.ENDC}")
        return False
    
    # Validate mutation_drift_index.json
    mdi = files_data['mutation_drift_index.json']
    if 'mdi' in mdi:
        print(f"{TermColors.GREEN}✓ mutation_drift_index.json contains MDI value: {mdi['mdi']}{TermColors.ENDC}")
        
        # Warn if MDI is above warning threshold
        if mdi['mdi'] > 30:
            print(f"{TermColors.WARNING}⚠ MDI is above warning threshold: {mdi['mdi']} > 30{TermColors.ENDC}")
    else:
        print(f"{TermColors.FAIL}✗ mutation_drift_index.json missing MDI value{TermColors.ENDC}")
        return False
    
    # All validations passed
    print(f"\n{TermColors.GREEN}╔════════════════════════════════════════════════════════╗{TermColors.ENDC}")
    print(f"{TermColors.GREEN}║     Phase 49 Performance Loop Hardening VALIDATED       ║{TermColors.ENDC}")
    print(f"{TermColors.GREEN}╚════════════════════════════════════════════════════════╝{TermColors.ENDC}")
    
    print(f"\n{TermColors.BLUE}Summary:{TermColors.ENDC}")
    print(f"• Loop drift index (MDI): {mdi['mdi']}")
    print(f"• Average latency: {loop_report['avg_latency']} ms")
    print(f"• Min/max latency: {loop_report['min_latency']} / {loop_report['max_latency']} ms")
    print(f"• Event bus route: live_execution_loop (Producer: {next((r for r in event_bus['routes'] if r.get('topic') == 'live_execution_loop'), {}).get('producer', 'Unknown')})")
    print(f"• Telemetry metrics: {len(required_metrics)} registered")
    
    return True

if __name__ == "__main__":
    if validate_phase49():
        sys.exit(0)
    else:
        sys.exit(1)

    def log_state(self):
        """Phase 91 Telemetry Enforcer - Log current module state"""
        state_data = {
            "module": __name__,
            "timestamp": datetime.now().isoformat(),
            "status": "active",
            "phase": "91_telemetry_enforcement"
        }
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", state_data)
        return state_data
        

# <!-- @GENESIS_MODULE_END: validate_phase_49 -->