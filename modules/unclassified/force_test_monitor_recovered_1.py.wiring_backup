# <!-- @GENESIS_MODULE_START: force_test_monitor -->

from datetime import datetime\nfrom event_bus import EventBus
"""
FORCE TERMINATE Smart Monitor Test
==================================
This version FORCES exit after testing to prevent hanging
"""

import os
import sys
import time
import signal
import threading
from smart_execution_monitor import SmartExecutionMonitor
from event_bus import emit_event

# Force terminate after timeout
def force_exit():
    time.sleep(5)  # Wait 5 seconds max
    print("FORCE TERMINATING TEST!")
    os._exit(0)  # Force exit

def quick_test():
    # Start force exit timer
    exit_timer = threading.Thread(target=force_exit, daemon=True)
    exit_timer.start()
    
    print("QUICK TEST: Starting...")
    
    try:
        # Test 1: Create monitor
        print("TEST 1: Creating monitor...")
        monitor = SmartExecutionMonitor()
        print("TEST 1: PASSED - Monitor created")
        
        # Test 2: Send event
        print("TEST 2: Sending test event...")
        emit_event("LiveTradeExecuted", {
            "trade_id": "FORCE_TEST_001",
            "symbol": "EURUSD",
            "pnl": -200.0,
            "slippage_pips": 2.0  # High slippage to trigger alert
        }, "ForceTest")
        print("TEST 2: PASSED - Event sent")
        
        # Test 3: Wait briefly for processing
        print("TEST 3: Waiting for processing...")
        time.sleep(1)
        print("TEST 3: PASSED - Processing complete")
        
        print("ALL TESTS PASSED!")
        return True
        
    except Exception as e:
        print(f"TEST FAILED: {e}")
        return False
    finally:
        print("FORCING EXIT...")
        os._exit(0)  # Force exit no matter what

if __name__ == "__main__":
    print("FORCE TERMINATE TEST STARTING...")
    success = quick_test()
    print(f"Result: {success}")
    os._exit(0)  # Double force exit


# <!-- @GENESIS_MODULE_END: force_test_monitor -->

def detect_divergence(price_data: list, indicator_data: list, window: int = 10) -> Dict:
    """
    Detect regular and hidden divergences between price and indicator
    
    Args:
        price_data: List of price values (closing prices)
        indicator_data: List of indicator values (e.g., RSI, MACD)
        window: Number of periods to check for divergence
        
    Returns:
        Dictionary with divergence information
    """
    result = {
        "regular_bullish": False,
        "regular_bearish": False,
        "hidden_bullish": False,
        "hidden_bearish": False,
        "strength": 0.0
    }
    
    # Need at least window + 1 periods of data
    if len(price_data) < window + 1 or len(indicator_data) < window + 1:
        return result
        
    # Get the current and historical points
    current_price = price_data[-1]
    previous_price = min(price_data[-window:-1]) if price_data[-1] > price_data[-2] else max(price_data[-window:-1])
    previous_price_idx = price_data[-window:-1].index(previous_price) + len(price_data) - window
    
    current_indicator = indicator_data[-1]
    previous_indicator = indicator_data[previous_price_idx]
    
    # Check for regular divergences
    # Bullish - Lower price lows but higher indicator lows
    if current_price < previous_price and current_indicator > previous_indicator:
        result["regular_bullish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
        
    # Bearish - Higher price highs but lower indicator highs
    elif current_price > previous_price and current_indicator < previous_indicator:
        result["regular_bearish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
    
    # Check for hidden divergences
    # Bullish - Higher price lows but lower indicator lows
    elif current_price > previous_price and current_indicator < previous_indicator:
        result["hidden_bullish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
        
    # Bearish - Lower price highs but higher indicator highs
    elif current_price < previous_price and current_indicator > previous_indicator:
        result["hidden_bearish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
    
    # Emit divergence event if detected
    if any([result["regular_bullish"], result["regular_bearish"], 
            result["hidden_bullish"], result["hidden_bearish"]]):
        emit_event("divergence_detected", {
            "type": next(k for k, v in result.items() if v is True and k != "strength"),
            "strength": result["strength"],
            "symbol": price_data.symbol if hasattr(price_data, "symbol") else "unknown",
            "timestamp": datetime.now().isoformat()
        })
        
    return result
