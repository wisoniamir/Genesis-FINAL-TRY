# <!-- @GENESIS_MODULE_START: validate_phase_50 -->

from datetime import datetime\n#!/usr/bin/env python3

# 📊 GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "validate_phase_50",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in validate_phase_50: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "validate_phase_50",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("validate_phase_50", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in validate_phase_50: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False


# -*- coding: utf-8 -*-

"""
Validate Phase 50 Execution Loop Telemetry implementation
"""

from event_bus import EventBus

import json
import sys
import os

class TermColors:
    def emergency_stop(self, reason: str = "Manual trigger") -> bool:
            """GENESIS Emergency Kill Switch"""
            try:
                # Emit emergency event
                if hasattr(self, 'event_bus') and self.event_bus:
                    emit_event("emergency_stop", {
                        "module": "validate_phase_50",
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                # Log telemetry
                self.emit_module_telemetry("emergency_stop", {
                    "reason": reason,
                    "timestamp": datetime.now().isoformat()
                })

                # Set emergency state
                if hasattr(self, '_emergency_stop_active'):
                    self._emergency_stop_active = True

                return True
            except Exception as e:
                print(f"Emergency stop error in validate_phase_50: {e}")
                return False
    def validate_ftmo_compliance(self, trade_data: dict) -> bool:
            """GENESIS FTMO Compliance Validator"""
            # Daily drawdown check (5%)
            daily_loss = trade_data.get('daily_loss_pct', 0)
            if daily_loss > 5.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "daily_drawdown", 
                    "value": daily_loss,
                    "threshold": 5.0
                })
                return False

            # Maximum drawdown check (10%)
            max_drawdown = trade_data.get('max_drawdown_pct', 0)
            if max_drawdown > 10.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "max_drawdown", 
                    "value": max_drawdown,
                    "threshold": 10.0
                })
                return False

            # Risk per trade check (2%)
            risk_pct = trade_data.get('risk_percent', 0)
            if risk_pct > 2.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "risk_exceeded", 
                    "value": risk_pct,
                    "threshold": 2.0
                })
                return False

            return True
    def emit_module_telemetry(self, event: str, data: dict = None):
            """GENESIS Module Telemetry Hook"""
            telemetry_data = {
                "timestamp": datetime.now().isoformat(),
                "module": "validate_phase_50",
                "event": event,
                "data": data or {}
            }
            try:
                emit_telemetry("validate_phase_50", event, telemetry_data)
            except Exception as e:
                print(f"Telemetry error in validate_phase_50: {e}")
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def load_json_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return json.load(file)
    except Exception as e:
        print(f"{TermColors.FAIL}ERROR: Failed to load {file_path}: {str(e)}{TermColors.ENDC}")
        raise RuntimeError("ARCHITECT_MODE_COMPLIANCE: Operation failed")

def validate_phase50():
    print(f"{TermColors.HEADER}╔════════════════════════════════════════════════════════╗{TermColors.ENDC}")
    print(f"{TermColors.HEADER}║     Phase 50 Execution Loop Telemetry Validation      ║{TermColors.ENDC}")
    print(f"{TermColors.HEADER}╚════════════════════════════════════════════════════════╝{TermColors.ENDC}")
    
    # Define required files
    required_files = [
        'loop_integrity_report.json',
        'mutation_drift_index.json',
        'execution_loop_config.json',
        'event_bus.json',
        'telemetry.json'
    ]
    
    # Check if all required files exist
    all_files_exist = True
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"{TermColors.GREEN}✓ File exists: {file_path}{TermColors.ENDC}")
        else:
            all_files_exist = False
            print(f"{TermColors.FAIL}✗ File missing: {file_path}{TermColors.ENDC}")
    
    if not all_files_exist:
        print(f"{TermColors.FAIL}Validation failed: Not all required files exist{TermColors.ENDC}")
        return False
    
    # Load all files
    files_data = {}
    for file_path in required_files:
        files_data[file_path] = load_json_file(file_path)
        if not files_data[file_path]:
            print(f"{TermColors.FAIL}Validation failed: Could not load {file_path}{TermColors.ENDC}")
            return False
    
    # Validate loop_integrity_report.json
    loop_report = files_data['loop_integrity_report.json']
    if 'telemetry_integrity_status' in loop_report:
        print(f"{TermColors.GREEN}✓ loop_integrity_report.json contains telemetry_integrity_status: {loop_report['telemetry_integrity_status']}{TermColors.ENDC}")
    else:
        print(f"{TermColors.FAIL}✗ loop_integrity_report.json missing telemetry_integrity_status{TermColors.ENDC}")
        return False
    
    if 'status' in loop_report:
        print(f"{TermColors.GREEN}✓ loop_integrity_report.json contains system status: {loop_report['status']}{TermColors.ENDC}")
    else:
        print(f"{TermColors.FAIL}✗ loop_integrity_report.json missing system status{TermColors.ENDC}")
        return False
    
    # Validate mutation_drift_index.json
    mdi = files_data['mutation_drift_index.json']
    if 'integrity_status' in mdi:
        print(f"{TermColors.GREEN}✓ mutation_drift_index.json contains integrity_status: {mdi['integrity_status']}{TermColors.ENDC}")
    else:
        print(f"{TermColors.FAIL}✗ mutation_drift_index.json missing integrity_status{TermColors.ENDC}")
        return False
    
    # Validate execution_loop_config.json
    loop_config = files_data['execution_loop_config.json']
    required_config_keys = [
        'telemetry_integrity_status',
        'mt5_pulse_interval_ms',
        'signal_dispatch_max_latency_ms',
        'mt5_thresholds'
    ]
    
    config_valid = True
    for key in required_config_keys:
        if key in loop_config:
            print(f"{TermColors.GREEN}✓ execution_loop_config.json contains key: {key}{TermColors.ENDC}")
        else:
            config_valid = False
            print(f"{TermColors.FAIL}✗ execution_loop_config.json missing key: {key}{TermColors.ENDC}")
    
    if not config_valid:
        print(f"{TermColors.FAIL}Validation failed: execution_loop_config.json missing required keys{TermColors.ENDC}")
        return False
    
    # Validate event_bus.json contains signal_timing_pulse route
    event_bus = files_data['event_bus.json']
    has_signal_timing_route = False
    has_telemetry_monitor_route = False
    
    for route in event_bus.get("routes", []):
        if route.get("topic") == "signal_timing_pulse":
            has_signal_timing_route = True
            print(f"{TermColors.GREEN}✓ event_bus.json contains signal_timing_pulse route{TermColors.ENDC}")
        
        if route.get("topic") == "telemetry_loop_monitor":
            has_telemetry_monitor_route = True
            print(f"{TermColors.GREEN}✓ event_bus.json contains telemetry_loop_monitor route{TermColors.ENDC}")
    
    if not has_signal_timing_route:
        print(f"{TermColors.FAIL}✗ event_bus.json missing signal_timing_pulse route{TermColors.ENDC}")
        return False
        
    if not has_telemetry_monitor_route:
        print(f"{TermColors.FAIL}✗ event_bus.json missing telemetry_loop_monitor route{TermColors.ENDC}")
        return False
    
    # Validate telemetry.json
    telemetry = files_data['telemetry.json']
    if 'telemetry_integrity_status' in telemetry:
        print(f"{TermColors.GREEN}✓ telemetry.json contains telemetry_integrity_status: {telemetry['telemetry_integrity_status']}{TermColors.ENDC}")
    else:
        print(f"{TermColors.FAIL}✗ telemetry.json missing telemetry_integrity_status{TermColors.ENDC}")
        return False
    
    # Check if system status matches across all files
    status_values = {
        'loop_integrity_report.json': loop_report.get('telemetry_integrity_status'),
        'mutation_drift_index.json': mdi.get('integrity_status'),
        'execution_loop_config.json': loop_config.get('telemetry_integrity_status'),
        'telemetry.json': telemetry.get('telemetry_integrity_status')
    }
    
    if len(set(status_values.values())) == 1:
        status = next(iter(set(status_values.values())))
        print(f"{TermColors.GREEN}✓ Telemetry integrity status consistent across all files: {status}{TermColors.ENDC}")
    else:
        print(f"{TermColors.FAIL}✗ Telemetry integrity status inconsistent across files: {status_values}{TermColors.ENDC}")
        return False
    
    # All validations passed
    print(f"\n{TermColors.GREEN}╔════════════════════════════════════════════════════════╗{TermColors.ENDC}")
    print(f"{TermColors.GREEN}║     Phase 50 Execution Loop Telemetry VALIDATED        ║{TermColors.ENDC}")
    print(f"{TermColors.GREEN}╚════════════════════════════════════════════════════════╝{TermColors.ENDC}")
    
    print(f"\n{TermColors.BLUE}Summary:{TermColors.ENDC}")
    print(f"• Telemetry integrity status: {status}")
    print(f"• System status: {loop_report.get('status')}")
    print(f"• MT5 pulse interval: {loop_config.get('mt5_pulse_interval_ms')} ms")
    print(f"• Signal dispatch max latency: {loop_config.get('signal_dispatch_max_latency_ms')} ms")
    print(f"• Event bus routes: signal_timing_pulse, telemetry_loop_monitor")
    
    return True

if __name__ == "__main__":
    if validate_phase50():
        sys.exit(0)
    else:
        sys.exit(1)

    def log_state(self):
        """Phase 91 Telemetry Enforcer - Log current module state"""
        state_data = {
            "module": __name__,
            "timestamp": datetime.now().isoformat(),
            "status": "active",
            "phase": "91_telemetry_enforcement"
        }
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", state_data)
        return state_data
        

# <!-- @GENESIS_MODULE_END: validate_phase_50 -->