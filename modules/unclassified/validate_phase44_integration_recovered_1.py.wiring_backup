# <!-- @GENESIS_MODULE_START: validate_phase44_integration -->

from datetime import datetime\nfrom event_bus import EventBus
#!/usr/bin/env python3
"""
PHASE 44 Integration Validation Script
=====================================

Validates that all Phase 44 components are properly integrated and functional.
"""

import os
import json
import sys
from typing import Dict, Any

def validate_phase44_integration() -> Dict[str, Any]:
    """Validate Phase 44 integration status"""
    validation_results = {
        "phase_44_complete": False,
        "core_files_updated": {},
        "engine_functional": False,
        "tests_passed": False,
        "telemetry_configured": False,
        "eventbus_routes_registered": False
    }
    
    print("üîç PHASE 44 INTEGRATION VALIDATION")
    print("=" * 50)
    
    # Check core files
    core_files = [
        "build_status.json",
        "system_tree.json", 
        "event_bus.json",
        "telemetry.json",
        "module_registry.json",
        "build_tracker.md"
    ]
    
    for file_name in core_files:
        if os.path.exists(file_name):
            validation_results["core_files_updated"][file_name] = True
            print(f"‚úÖ {file_name} - EXISTS")
        else:
            validation_results["core_files_updated"][file_name] = False
            print(f"‚ùå {file_name} - MISSING")
    
    # Check build_status.json for Phase 44 completion
    try:
        with open("build_status.json", "r") as f:
            build_status = json.load(f)
            if build_status.get("phase_44_strategy_mutation_priority_patch_complete"):
                validation_results["phase_44_complete"] = True
                print("‚úÖ PHASE 44 COMPLETION - CONFIRMED")
            else:
                print("‚ùå PHASE 44 COMPLETION - NOT CONFIRMED")
    except Exception as e:
        print(f"‚ùå BUILD STATUS CHECK - ERROR: {e}")
    
    # Check event_bus.json for Phase 44 routes
    try:
        with open("event_bus.json", "r") as f:
            event_bus = json.load(f)
            phase_44_routes = [route for route in event_bus.get("routes", []) 
                             if route.get("phase") == 44]
            if len(phase_44_routes) >= 4:  # Should have at least 4 Phase 44 routes
                validation_results["eventbus_routes_registered"] = True
                print(f"‚úÖ EVENTBUS ROUTES - {len(phase_44_routes)} Phase 44 routes found")
            else:
                print(f"‚ùå EVENTBUS ROUTES - Only {len(phase_44_routes)} Phase 44 routes found")
    except Exception as e:
        print(f"‚ùå EVENTBUS CHECK - ERROR: {e}")
    
    # Check telemetry.json for Phase 44 hooks
    try:
        with open("telemetry.json", "r") as f:
            telemetry = json.load(f)
            phase_44_hooks = [hook for hook in telemetry.get("hooks", []) 
                            if hook.get("phase") == 44]
            if len(phase_44_hooks) >= 4:  # Should have at least 4 Phase 44 hooks
                validation_results["telemetry_configured"] = True
                print(f"‚úÖ TELEMETRY HOOKS - {len(phase_44_hooks)} Phase 44 hooks found")
            else:
                print(f"‚ùå TELEMETRY HOOKS - Only {len(phase_44_hooks)} Phase 44 hooks found")
    except Exception as e:
        print(f"‚ùå TELEMETRY CHECK - ERROR: {e}")
    
    # Test engine import and basic functionality
    try:
        from strategy_mutation_logic_engine import StrategyMutationLogicEngine
        engine = StrategyMutationLogicEngine()
        
        # Test basic functionality
        test_strategy = {"priority_score": 0.5}
        test_feedback = {"execution_success": True}
        
        result = engine.priority_score_mutation_logic(test_strategy, test_feedback)
        if result.get("success"):
            validation_results["engine_functional"] = True
            print("‚úÖ ENGINE FUNCTIONALITY - OPERATIONAL")
        else:
            print(f"‚ùå ENGINE FUNCTIONALITY - ERROR: {result.get('error')}")
            
    except Exception as e:
        print(f"‚ùå ENGINE IMPORT/TEST - ERROR: {e}")
    
    # Check if tests exist and are functional
    if os.path.exists("test_phase44_priority_score_mutation.py"):
        validation_results["tests_passed"] = True
        print("‚úÖ PHASE 44 TESTS - AVAILABLE")
    else:
        print("‚ùå PHASE 44 TESTS - MISSING")
    
    # Overall status
    print("\n" + "=" * 50)
    total_checks = 6
    passed_checks = sum([
        validation_results["phase_44_complete"],
        all(validation_results["core_files_updated"].values()),
        validation_results["engine_functional"],
        validation_results["tests_passed"],
        validation_results["telemetry_configured"],
        validation_results["eventbus_routes_registered"]
    ])
    
    print(f"üèÜ OVERALL STATUS: {passed_checks}/{total_checks} checks passed")
    
    if passed_checks == total_checks:
        print("üéØ PHASE 44 INTEGRATION: ‚úÖ FULLY VALIDATED")
        print("üöÄ READY FOR PRODUCTION DEPLOYMENT")
    else:
        print("‚ö†Ô∏è  PHASE 44 INTEGRATION: PARTIAL - Some issues detected")
    
    return validation_results

if __name__ == "__main__":
    results = validate_phase44_integration()
    print(f"\nüìä Validation Results: {json.dumps(results, indent=2)}")


# <!-- @GENESIS_MODULE_END: validate_phase44_integration -->