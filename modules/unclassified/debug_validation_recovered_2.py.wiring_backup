from event_bus import EventBus
"""
Debug the validation issue
"""
from signal_engine import SignalEngine
from datetime import datetime
from event_bus import emit_event, subscribe_to_event


# <!-- @GENESIS_MODULE_END: debug_validation_recovered_2 -->


# <!-- @GENESIS_MODULE_START: debug_validation_recovered_2 -->

# Create a debug callback to see what data the SignalEngine receives
def debug_callback(event):
    print(f"DEBUG: Received event: {event}")
    print(f"DEBUG: Event type: {type(event)}")
    print(f"DEBUG: Event keys: {list(event.keys()) if isinstance(event, dict) else 'Not a dict'}")

# Subscribe to see what's being sent
subscribe_to_event("TickData", debug_callback, "DebugListener")

# Create test data
test_tick = {
    "symbol": "EURUSD",
    "timestamp": datetime.utcnow().isoformat(),
    "bid": 1.08450,
    "ask": 1.08452,
    "volume": 1000000,
    "source": "TEST_MT5"
}

print("Sending test tick...")
emit_event("TickData", test_tick, "TestProducer")

# Test direct validation
signal_engine = SignalEngine()
direct_result = signal_engine._validate_real_tick_data(test_tick)
print(f"Direct validation result: {direct_result}")
