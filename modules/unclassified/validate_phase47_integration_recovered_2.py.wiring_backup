#!/usr/bin/env python3
"""
🔐 GENESIS TRADING BOT — PHASE 47 VALIDATION SCRIPT
📋 Module: validate_phase47_integration.py
🎯 Purpose: Validate Phase 47 Portfolio Optimizer Integration compliance
📅 Created: 2025-06-18
⚖️ Compliance: ARCHITECT_MODE_V4.0
🧭 Phase: 47
"""

import json
import os
import sys
from datetime import datetime, timezone
from pathlib import Path


# <!-- @GENESIS_MODULE_END: validate_phase47_integration_recovered_2 -->


# <!-- @GENESIS_MODULE_START: validate_phase47_integration_recovered_2 -->

def validate_phase47_integration():
    """
    🔍 Comprehensive validation of Phase 47 Portfolio Optimizer Integration
    
    Validates:
    - Integration module exists
    - EventBus routes registered
    - System tree updated
    - Module registry updated
    - Build tracker updated
    - Architect compliance
    """
    
    print("🚀 Starting GENESIS Phase 47 Integration Validation")
    print("=" * 60)
    
    validation_results = {
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "phase": 47,
        "validations": {},
        "errors": [],
        "warnings": [],
        "overall_status": "PENDING"
    }
    
    # 1. Validate integration module exists
    print("📁 Validating integration module...")
    integration_file = Path("phase47_portfolio_optimizer_integration.py")
    if integration_file.exists():
        print("✅ Integration module exists")
        validation_results["validations"]["integration_module"] = True
        
        # Check file size
        file_size = integration_file.stat().st_size
        if file_size > 1000:  # Should be a substantial file
            print(f"✅ Integration module size: {file_size} bytes")
            validation_results["validations"]["integration_module_size"] = True
        else:
            print(f"⚠️  Integration module size too small: {file_size} bytes")
            validation_results["warnings"].append(f"Integration module size too small: {file_size} bytes")
            validation_results["validations"]["integration_module_size"] = False
    else:
        print("❌ Integration module missing")
        validation_results["validations"]["integration_module"] = False
        validation_results["errors"].append("Integration module file missing")
    
    # 2. Validate EventBus routes
    print("\n📡 Validating EventBus routes...")
    try:
        with open("event_bus.json", "r") as f:
            event_bus = json.load(f)
        
        phase47_routes = [
            "strategy_weights_updated",
            "portfolio_weights_updated", 
            "phase47_integration_started",
            "phase47_integration_error"
        ]
        
        found_routes = []
        for route_data in event_bus.get("routes", []):
            if route_data.get("topic") in phase47_routes:
                found_routes.append(route_data.get("topic"))
        
        if len(found_routes) >= 3:  # At least 3 critical routes
            print(f"✅ EventBus routes registered: {found_routes}")
            validation_results["validations"]["eventbus_routes"] = True
        else:
            print(f"❌ Insufficient EventBus routes: {found_routes}")
            validation_results["validations"]["eventbus_routes"] = False
            validation_results["errors"].append(f"Missing EventBus routes. Found: {found_routes}")
            
    except Exception as e:
        print(f"❌ Error validating EventBus: {e}")
        validation_results["validations"]["eventbus_routes"] = False
        validation_results["errors"].append(f"EventBus validation error: {e}")
    
    # 3. Validate System Tree
    print("\n🌳 Validating System Tree...")
    try:
        with open("system_tree.json", "r") as f:
            system_tree = json.load(f)
        
        # Check for Phase 47 integration module
        phase47_found = False
        for node in system_tree.get("nodes", []):
            if node.get("id") == "Phase47PortfolioOptimizerIntegration":
                phase47_found = True
                print("✅ Phase 47 integration module found in system tree")
                break
        
        if phase47_found:
            validation_results["validations"]["system_tree"] = True
        else:
            print("❌ Phase 47 integration module not found in system tree")
            validation_results["validations"]["system_tree"] = False
            validation_results["errors"].append("Phase 47 module not in system tree")
            
        # Check metadata
        metadata = system_tree.get("metadata", {})
        if metadata.get("phase_47_portfolio_optimizer_integration_complete"):
            print("✅ Phase 47 completion flag found in system tree metadata")
            validation_results["validations"]["system_tree_metadata"] = True
        else:
            print("⚠️  Phase 47 completion flag not found in system tree metadata")
            validation_results["warnings"].append("Phase 47 completion flag missing from system tree metadata")
            validation_results["validations"]["system_tree_metadata"] = False
            
    except Exception as e:
        print(f"❌ Error validating System Tree: {e}")
        validation_results["validations"]["system_tree"] = False
        validation_results["errors"].append(f"System Tree validation error: {e}")
    
    # 4. Validate Module Registry
    print("\n📋 Validating Module Registry...")
    try:
        with open("module_registry.json", "r") as f:
            module_registry = json.load(f)
        
        # Check for Phase 47 module registration
        phase47_registered = False
        for module in module_registry.get("modules", []):
            if module.get("name") == "Phase47PortfolioOptimizerIntegration":
                phase47_registered = True
                print("✅ Phase 47 integration module registered")
                break
        
        if phase47_registered:
            validation_results["validations"]["module_registry"] = True
        else:
            print("❌ Phase 47 integration module not registered")
            validation_results["validations"]["module_registry"] = False
            validation_results["errors"].append("Phase 47 module not registered")
        
        # Check fingerprint
        fingerprints = module_registry.get("fingerprints", {})
        if "Phase47PortfolioOptimizerIntegration" in fingerprints:
            print("✅ Phase 47 integration module fingerprint registered")
            validation_results["validations"]["module_fingerprint"] = True
        else:
            print("❌ Phase 47 integration module fingerprint missing")
            validation_results["validations"]["module_fingerprint"] = False
            validation_results["errors"].append("Phase 47 module fingerprint missing")
            
    except Exception as e:
        print(f"❌ Error validating Module Registry: {e}")
        validation_results["validations"]["module_registry"] = False
        validation_results["errors"].append(f"Module Registry validation error: {e}")
    
    # 5. Validate Build Tracker
    print("\n📝 Validating Build Tracker...")
    try:
        with open("build_tracker.md", "r") as f:
            build_tracker = f.read()
        
        if "PHASE 47 LIVE FEED SYNC INTEGRATION" in build_tracker:
            print("✅ Phase 47 entry found in build tracker")
            validation_results["validations"]["build_tracker"] = True
        else:
            print("❌ Phase 47 entry not found in build tracker")
            validation_results["validations"]["build_tracker"] = False
            validation_results["errors"].append("Phase 47 entry missing from build tracker")
            
    except Exception as e:
        print(f"❌ Error validating Build Tracker: {e}")
        validation_results["validations"]["build_tracker"] = False
        validation_results["errors"].append(f"Build Tracker validation error: {e}")
    
    # 6. Validate Portfolio Optimizer exists
    print("\n💼 Validating Portfolio Optimizer...")
    portfolio_optimizer_file = Path("portfolio_optimizer.py")
    if portfolio_optimizer_file.exists():
        print("✅ Portfolio Optimizer module exists")
        validation_results["validations"]["portfolio_optimizer"] = True
    else:
        print("❌ Portfolio Optimizer module missing")
        validation_results["validations"]["portfolio_optimizer"] = False
        validation_results["errors"].append("Portfolio Optimizer module missing")
    
    # 7. Validate Strategy Mutation Engine exists
    print("\n🔧 Validating Strategy Mutation Engine...")
    mutation_engine_file = Path("strategy_mutation_logic_engine.py")
    if mutation_engine_file.exists():
        print("✅ Strategy Mutation Logic Engine exists")
        validation_results["validations"]["strategy_mutation_engine"] = True
    else:
        print("❌ Strategy Mutation Logic Engine missing")
        validation_results["validations"]["strategy_mutation_engine"] = False
        validation_results["errors"].append("Strategy Mutation Logic Engine missing")
    
    # 8. Calculate overall status
    print("\n📊 Calculating Overall Status...")
    total_validations = len(validation_results["validations"])
    passed_validations = sum(1 for v in validation_results["validations"].values() if v)
    success_rate = (passed_validations / total_validations * 100) if total_validations > 0 else 0
    
    if success_rate >= 90:
        validation_results["overall_status"] = "PASSED"
        status_icon = "✅"
    elif success_rate >= 70:
        validation_results["overall_status"] = "WARNING" 
        status_icon = "⚠️"
    else:
        validation_results["overall_status"] = "FAILED"
        status_icon = "❌"
    
    print(f"{status_icon} Overall Status: {validation_results['overall_status']}")
    print(f"📈 Success Rate: {success_rate:.1f}% ({passed_validations}/{total_validations})")
    
    validation_results["success_rate"] = success_rate
    validation_results["passed_validations"] = passed_validations
    validation_results["total_validations"] = total_validations
    
    # Print summary
    print("\n" + "=" * 60)
    print("📋 VALIDATION SUMMARY")
    print("=" * 60)
    
    for validation, result in validation_results["validations"].items():
        status = "✅ PASS" if result else "❌ FAIL"
        print(f"{status} {validation}")
    
    if validation_results["warnings"]:
        print("\n⚠️  WARNINGS:")
        for warning in validation_results["warnings"]:
            print(f"   - {warning}")
    
    if validation_results["errors"]:
        print("\n❌ ERRORS:")
        for error in validation_results["errors"]:
            print(f"   - {error}")
    
    # Save validation results
    try:
        with open("phase47_validation_results.json", "w") as f:
            json.dump(validation_results, f, indent=2)
        print(f"\n💾 Validation results saved to phase47_validation_results.json")
    except Exception as e:
        print(f"\n🚨 Failed to save validation results: {e}")
    
    print("\n🏁 Phase 47 validation complete!")
    return validation_results["overall_status"] == "PASSED"


if __name__ == "__main__":
    success = validate_phase47_integration()
    sys.exit(0 if success else 1)
