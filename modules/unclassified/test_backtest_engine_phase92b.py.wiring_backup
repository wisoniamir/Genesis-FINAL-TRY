from event_bus import EventBus
#!/usr/bin/env python3
"""
üîÅ GENESIS PHASE 92B - Backtest Engine Test Runner
Test the backtest engine with real MT5 data - standalone version
"""

import json
import logging
import sys
import os
from datetime import datetime, timezone

# Add current directory to path
sys.path.insert(0, os.getcwd())

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('BacktestTest')

def test_backtest_engine():
    """Test backtest engine with real MT5 data"""
    try:
        logger.info("üöÄ Starting Phase 92B Backtest Engine Test")
        
        # Test MT5 import
        try:
            import MetaTrader5 as mt5
            logger.info("‚úÖ MetaTrader5 import successful")
        except Exception as e:
            logger.error(f"‚ùå MetaTrader5 import failed: {e}")
            return False
        
        # Test basic functionality without event_bus dependency
        logger.info("üîß Testing backtest engine core functionality...")
        
        # Create a simple backtest implementation
        from backtest_engine_simple import SimpleBacktestEngine


# <!-- @GENESIS_MODULE_END: test_backtest_engine_phase92b -->


# <!-- @GENESIS_MODULE_START: test_backtest_engine_phase92b -->
        
        engine = SimpleBacktestEngine()
        logger.info("‚úÖ Simple backtest engine created")
        
        # Run a test backtest
        symbol = "EURUSD"
        logger.info(f"üìä Running backtest for {symbol}")
        
        results = engine.run_simple_backtest(symbol)
        
        if results and "error" not in results:
            logger.info(f"‚úÖ Backtest completed successfully!")
            logger.info(f"   Symbol: {results.get('symbol', 'N/A')}")
            logger.info(f"   Total Trades: {results.get('total_trades', 0)}")
            logger.info(f"   Total PnL: ${results.get('total_pnl', 0):.2f}")
            logger.info(f"   Win Rate: {results.get('win_rate', 0):.1%}")
            
            # Store results
            with open("test_backtest_results.json", 'w') as f:
                json.dump(results, f, indent=2, default=str)
            
            return True
        else:
            logger.error(f"‚ùå Backtest failed: {results.get('error', 'Unknown error')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Backtest test failed: {e}")
        return False

def main():
    """Run backtest engine test"""
    success = test_backtest_engine()
    
    if success:
        print("\nüéâ PHASE 92B BACKTEST ENGINE TEST: ‚úÖ PASSED")
        print("‚úÖ Real MT5 data integration working")
        print("‚úÖ Backtest calculations functioning")
        print("‚úÖ Results output generated")
    else:
        print("\n‚ùå PHASE 92B BACKTEST ENGINE TEST: ‚ùå FAILED")
        print("‚ùå Check logs for details")
    
    return success

if __name__ == "__main__":
    main()


def detect_divergence(price_data: list, indicator_data: list, window: int = 10) -> Dict:
    """
    Detect regular and hidden divergences between price and indicator
    
    Args:
        price_data: List of price values (closing prices)
        indicator_data: List of indicator values (e.g., RSI, MACD)
        window: Number of periods to check for divergence
        
    Returns:
        Dictionary with divergence information
    """
    result = {
        "regular_bullish": False,
        "regular_bearish": False,
        "hidden_bullish": False,
        "hidden_bearish": False,
        "strength": 0.0
    }
    
    # Need at least window + 1 periods of data
    if len(price_data) < window + 1 or len(indicator_data) < window + 1:
        return result
        
    # Get the current and historical points
    current_price = price_data[-1]
    previous_price = min(price_data[-window:-1]) if price_data[-1] > price_data[-2] else max(price_data[-window:-1])
    previous_price_idx = price_data[-window:-1].index(previous_price) + len(price_data) - window
    
    current_indicator = indicator_data[-1]
    previous_indicator = indicator_data[previous_price_idx]
    
    # Check for regular divergences
    # Bullish - Lower price lows but higher indicator lows
    if current_price < previous_price and current_indicator > previous_indicator:
        result["regular_bullish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
        
    # Bearish - Higher price highs but lower indicator highs
    elif current_price > previous_price and current_indicator < previous_indicator:
        result["regular_bearish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
    
    # Check for hidden divergences
    # Bullish - Higher price lows but lower indicator lows
    elif current_price > previous_price and current_indicator < previous_indicator:
        result["hidden_bullish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
        
    # Bearish - Lower price highs but higher indicator highs
    elif current_price < previous_price and current_indicator > previous_indicator:
        result["hidden_bearish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
    
    # Emit divergence event if detected
    if any([result["regular_bullish"], result["regular_bearish"], 
            result["hidden_bullish"], result["hidden_bearish"]]):
        emit_event("divergence_detected", {
            "type": next(k for k, v in result.items() if v is True and k != "strength"),
            "strength": result["strength"],
            "symbol": price_data.symbol if hasattr(price_data, "symbol") else "unknown",
            "timestamp": datetime.now().isoformat()
        })
        
    return result
