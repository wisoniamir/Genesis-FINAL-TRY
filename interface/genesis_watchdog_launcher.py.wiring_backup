#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üê∫ GENESIS WATCHDOG LAUNCHER -- SYSTEM SENTINEL ACTIVATION
Launch and manage the GENESIS Watchdog system for continuous monitoring
"""

import sys
import time
import signal
from pathlib import Path

# Add current directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

from watchdog_core import GenesisWatchdogCore
try:
    from event_bus import EventBus
except ImportError:
    # Fallback if event_bus not available
    class EventBus:
        def emit(self, event, data): pass
import logging

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - WATCHDOG_LAUNCHER - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class GenesisWatchdogLauncher:
    """üê∫ GENESIS WATCHDOG LAUNCHER -- System Management"""
    
    def __init__(self):
        self.watchdog = GenesisWatchdogCore()
        self.event_bus = EventBus()
        self.running = False
        
        # Register signal handlers for graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
    def _signal_handler(self, signum, frame):
        """Handle shutdown signals gracefully"""
        logger.info(f"üõë Received signal {signum}, shutting down watchdog...")
        self.stop()
        
    def start(self, scan_interval: int = 30, background: bool = False):
        """üöÄ Start the GENESIS Watchdog system"""
        logger.info("üê∫ GENESIS WATCHDOG LAUNCHER -- Starting System Sentinel")
        logger.info("="*70)
        
        # Emit startup event
        self.event_bus.emit("watchdog_starting", {
            "timestamp": time.time(),
            "scan_interval": scan_interval,
            "background_mode": background
        })
        
        # Perform initial system validation
        logger.info("üîç Performing initial system validation...")
        initial_scan = self.watchdog.execute_full_scan()
        
        if initial_scan["violations_detected"]:
            logger.warning("‚ö†Ô∏è Initial scan detected violations - watchdog will monitor and remediate")
        else:
            logger.info("‚úÖ Initial system validation passed")
            
        # Start the watchdog daemon
        self.running = True
        logger.info(f"üîÅ Starting continuous monitoring (interval: {scan_interval}s)")
        
        if background:
            # Start as daemon thread
            self.watchdog.start_watchdog_daemon(scan_interval)
            logger.info("‚úÖ Watchdog daemon started in background mode")
            
            # Emit ready event
            self.event_bus.emit("watchdog_ready", {
                "timestamp": time.time(),
                "mode": "background"
            })
            
        else:
            # Run in foreground with manual loop
            logger.info("üéØ Running in foreground mode - Press Ctrl+C to stop")
            self._run_foreground_loop(scan_interval)
            
    def _run_foreground_loop(self, scan_interval: int):
        """Run watchdog in foreground mode"""
        try:
            while self.running:
                # Execute scan
                scan_results = self.watchdog.execute_full_scan()
                
                # Emit scan results
                self.event_bus.emit("watchdog_scan_completed", {
                    "timestamp": time.time(),
                    "scan_results": scan_results
                })
                
                # Log scan summary
                violations = scan_results.get("violations_detected", False)
                if violations:
                    logger.warning("‚ö†Ô∏è Scan completed - violations detected and quarantined")
                else:
                    logger.info("‚úÖ Scan completed - no violations detected")
                    
                # Wait for next scan
                time.sleep(scan_interval)
                
        except KeyboardInterrupt:
            logger.info("üõë Stopping watchdog on user request...")
            self.stop()
            
    def stop(self):
        """üõë Stop the watchdog system"""
        if self.running:
            logger.info("üõë Stopping GENESIS Watchdog...")
            
            self.running = False
            self.watchdog.stop_watchdog()
            
            # Emit shutdown event
            self.event_bus.emit("watchdog_stopped", {
                "timestamp": time.time()
            })
            
            logger.info("‚úÖ GENESIS Watchdog stopped successfully")
        
    def status(self) -> dict:
        """üìä Get watchdog status"""
        return {
            "running": self.running,
            "last_scan": self.watchdog.last_scan_time.isoformat() if self.watchdog.last_scan_time else None,
            "quarantine_count": self.watchdog.quarantine_count,
            "violations_detected": len(self.watchdog.violations_detected)
        }
        
    def force_scan(self) -> dict:
        """üîç Force an immediate scan"""
        logger.info("üîç Forcing immediate watchdog scan...")
        return self.watchdog.execute_full_scan()

def main():
    """Main entry point for watchdog launcher"""
    import argparse


# <!-- @GENESIS_MODULE_END: genesis_watchdog_launcher -->


# <!-- @GENESIS_MODULE_START: genesis_watchdog_launcher -->
    
    parser = argparse.ArgumentParser(description="üê∫ GENESIS WATCHDOG LAUNCHER")
    parser.add_argument("--interval", type=int, default=30, 
                       help="Scan interval in seconds (default: 30)")
    parser.add_argument("--background", action="store_true",
                       help="Run in background daemon mode")
    parser.add_argument("--scan-only", action="store_true",
                       help="Perform single scan and exit")
    parser.add_argument("--status", action="store_true",
                       help="Check watchdog status")
    
    args = parser.parse_args()
    
    launcher = GenesisWatchdogLauncher()
    
    if args.status:
        # Check status
        status = launcher.status()
        print(f"üê∫ GENESIS WATCHDOG STATUS:")
        print(f"   Running: {status['running']}")
        print(f"   Last Scan: {status['last_scan']}")
        print(f"   Quarantine Count: {status['quarantine_count']}")
        print(f"   Violations: {status['violations_detected']}")
        return
        
    if args.scan_only:
        # Perform single scan
        print("üîç Performing single watchdog scan...")
        results = launcher.force_scan()
        print(f"‚úÖ Scan completed - Violations: {results['violations_detected']}")
        return
        
    # Start watchdog system
    try:
        launcher.start(scan_interval=args.interval, background=args.background)
        
        if args.background:
            # Keep main thread alive for background mode
            while launcher.running:
                time.sleep(1)
                
    except Exception as e:
        logger.error(f"‚ùå Watchdog launcher failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
