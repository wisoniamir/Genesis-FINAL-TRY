
# 📊 GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "genesis_watchdog_launcher",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in genesis_watchdog_launcher: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "genesis_watchdog_launcher",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("genesis_watchdog_launcher", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in genesis_watchdog_launcher: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False


from datetime import datetime

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
🐺 GENESIS WATCHDOG LAUNCHER -- SYSTEM SENTINEL ACTIVATION
Launch and manage the GENESIS Watchdog system for continuous monitoring
"""

import sys
import time
import signal
from pathlib import Path

# Add current directory to Python path for imports
sys.path.insert(0, str(Path(__file__).parent))

from watchdog_core import GenesisWatchdogCore
try:
    from event_bus import EventBus
except ImportError:
    # Fallback if event_bus not available
    class EventBus:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "genesis_watchdog_launcher",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in genesis_watchdog_launcher: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "genesis_watchdog_launcher",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("genesis_watchdog_launcher", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in genesis_watchdog_launcher: {e}")
        def emit(self, event, data): pass
import logging

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - WATCHDOG_LAUNCHER - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class GenesisWatchdogLauncher:
    def emergency_stop(self, reason: str = "Manual trigger") -> bool:
            """GENESIS Emergency Kill Switch"""
            try:
                # Emit emergency event
                if hasattr(self, 'event_bus') and self.event_bus:
                    emit_event("emergency_stop", {
                        "module": "genesis_watchdog_launcher",
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                # Log telemetry
                self.emit_module_telemetry("emergency_stop", {
                    "reason": reason,
                    "timestamp": datetime.now().isoformat()
                })

                # Set emergency state
                if hasattr(self, '_emergency_stop_active'):
                    self._emergency_stop_active = True

                return True
            except Exception as e:
                print(f"Emergency stop error in genesis_watchdog_launcher: {e}")
                return False
    def validate_ftmo_compliance(self, trade_data: dict) -> bool:
            """GENESIS FTMO Compliance Validator"""
            # Daily drawdown check (5%)
            daily_loss = trade_data.get('daily_loss_pct', 0)
            if daily_loss > 5.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "daily_drawdown", 
                    "value": daily_loss,
                    "threshold": 5.0
                })
                return False

            # Maximum drawdown check (10%)
            max_drawdown = trade_data.get('max_drawdown_pct', 0)
            if max_drawdown > 10.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "max_drawdown", 
                    "value": max_drawdown,
                    "threshold": 10.0
                })
                return False

            # Risk per trade check (2%)
            risk_pct = trade_data.get('risk_percent', 0)
            if risk_pct > 2.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "risk_exceeded", 
                    "value": risk_pct,
                    "threshold": 2.0
                })
                return False

            return True
    def emit_module_telemetry(self, event: str, data: dict = None):
            """GENESIS Module Telemetry Hook"""
            telemetry_data = {
                "timestamp": datetime.now().isoformat(),
                "module": "genesis_watchdog_launcher",
                "event": event,
                "data": data or {}
            }
            try:
                emit_telemetry("genesis_watchdog_launcher", event, telemetry_data)
            except Exception as e:
                print(f"Telemetry error in genesis_watchdog_launcher: {e}")
    """🐺 GENESIS WATCHDOG LAUNCHER -- System Management"""
    
    def __init__(self):
        self.watchdog = GenesisWatchdogCore()
        self.event_bus = EventBus()
        self.running = False
        
        # Register signal handlers for graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
    def _signal_handler(self, signum, frame):
        """Handle shutdown signals gracefully"""
        logger.info(f"🛑 Received signal {signum}, shutting down watchdog...")
        self.stop()
        
    def start(self, scan_interval: int = 30, background: bool = False):
        """🚀 Start the GENESIS Watchdog system"""
        logger.info("🐺 GENESIS WATCHDOG LAUNCHER -- Starting System Sentinel")
        logger.info("="*70)
        
        # Emit startup event
        self.event_bus.emit("watchdog_starting", {
            "timestamp": time.time(),
            "scan_interval": scan_interval,
            "background_mode": background
        })
        
        # Perform initial system validation
        logger.info("🔍 Performing initial system validation...")
        initial_scan = self.watchdog.execute_full_scan()
        
        if initial_scan["violations_detected"]:
            logger.warning("⚠️ Initial scan detected violations - watchdog will monitor and remediate")
        else:
            logger.info("✅ Initial system validation passed")
            
        # Start the watchdog daemon
        self.running = True
        logger.info(f"🔁 Starting continuous monitoring (interval: {scan_interval}s)")
        
        if background:
            # Start as daemon thread
            self.watchdog.start_watchdog_daemon(scan_interval)
            logger.info("✅ Watchdog daemon started in background mode")
            
            # Emit ready event
            self.event_bus.emit("watchdog_ready", {
                "timestamp": time.time(),
                "mode": "background"
            })
            
        else:
            # Run in foreground with manual loop
            logger.info("🎯 Running in foreground mode - Press Ctrl+C to stop")
            self._run_foreground_loop(scan_interval)
            
    def _run_foreground_loop(self, scan_interval: int):
        """Run watchdog in foreground mode"""
        try:
            while self.running:
                # Execute scan
                scan_results = self.watchdog.execute_full_scan()
                
                # Emit scan results
                self.event_bus.emit("watchdog_scan_completed", {
                    "timestamp": time.time(),
                    "scan_results": scan_results
                })
                
                # Log scan summary
                violations = scan_results.get("violations_detected", False)
                if violations:
                    logger.warning("⚠️ Scan completed - violations detected and quarantined")
                else:
                    logger.info("✅ Scan completed - no violations detected")
                    
                # Wait for next scan
                time.sleep(scan_interval)
                
        except KeyboardInterrupt:
            logger.info("🛑 Stopping watchdog on user request...")
            self.stop()
            
    def stop(self):
        """🛑 Stop the watchdog system"""
        if self.running:
            logger.info("🛑 Stopping GENESIS Watchdog...")
            
            self.running = False
            self.watchdog.stop_watchdog()
            
            # Emit shutdown event
            self.event_bus.emit("watchdog_stopped", {
                "timestamp": time.time()
            })
            
            logger.info("✅ GENESIS Watchdog stopped successfully")
        
    def status(self) -> dict:
        """📊 Get watchdog status"""
        return {
            "running": self.running,
            "last_scan": self.watchdog.last_scan_time.isoformat() if self.watchdog.last_scan_time else None,
            "quarantine_count": self.watchdog.quarantine_count,
            "violations_detected": len(self.watchdog.violations_detected)
        }
        
    def force_scan(self) -> dict:
        """🔍 Force an immediate scan"""
        logger.info("🔍 Forcing immediate watchdog scan...")
        return self.watchdog.execute_full_scan()

def main():
    """Main entry point for watchdog launcher"""
    import argparse


# <!-- @GENESIS_MODULE_END: genesis_watchdog_launcher -->


# <!-- @GENESIS_MODULE_START: genesis_watchdog_launcher -->
    
    parser = argparse.ArgumentParser(description="🐺 GENESIS WATCHDOG LAUNCHER")
    parser.add_argument("--interval", type=int, default=30, 
                       help="Scan interval in seconds (default: 30)")
    parser.add_argument("--background", action="store_true",
                       help="Run in background daemon mode")
    parser.add_argument("--scan-only", action="store_true",
                       help="Perform single scan and exit")
    parser.add_argument("--status", action="store_true",
                       help="Check watchdog status")
    
    args = parser.parse_args()
    
    launcher = GenesisWatchdogLauncher()
    
    if args.status:
        # Check status
        status = launcher.status()
        print(f"🐺 GENESIS WATCHDOG STATUS:")
        print(f"   Running: {status['running']}")
        print(f"   Last Scan: {status['last_scan']}")
        print(f"   Quarantine Count: {status['quarantine_count']}")
        print(f"   Violations: {status['violations_detected']}")
        return
        
    if args.scan_only:
        # Perform single scan
        print("🔍 Performing single watchdog scan...")
        results = launcher.force_scan()
        print(f"✅ Scan completed - Violations: {results['violations_detected']}")
        return
        
    # Start watchdog system
    try:
        launcher.start(scan_interval=args.interval, background=args.background)
        
        if args.background:
            # Keep main thread alive for background mode
            while launcher.running:
                time.sleep(1)
                
    except Exception as e:
        logger.error(f"❌ Watchdog launcher failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
