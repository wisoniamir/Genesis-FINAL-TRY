
# üîó GENESIS EventBus Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.hardened_event_bus import get_event_bus, emit_event, register_route
    EVENTBUS_AVAILABLE = True
except ImportError:
    # Fallback implementation
    def get_event_bus(): return None
    def emit_event(event, data): print(f"EVENT: {event} - {data}")
    def register_route(route, producer, consumer): pass
    EVENTBUS_AVAILABLE = False


"""
üîê GENESIS MT5 Real Data Connection Module - ARCHITECT MODE v7.0.0
üö´ NO MOCK DATA | üö´ NO SIMULATION | üì° LIVE DATA ONLY

This module establishes and validates real MT5 terminal connections.
ZERO TOLERANCE for fallback or simulated data.
"""

import os
import sys
import json
from datetime import datetime
from pathlib import Path

class GenesisRealMT5Connection:
    def emergency_stop(self, reason: str = "Manual trigger") -> bool:
            """GENESIS Emergency Kill Switch"""
            try:
                # Emit emergency event
                if hasattr(self, 'event_bus') and self.event_bus:
                    emit_event("emergency_stop", {
                        "module": "genesis_real_mt5_connection",
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                # Log telemetry
                self.emit_module_telemetry("emergency_stop", {
                    "reason": reason,
                    "timestamp": datetime.now().isoformat()
                })

                # Set emergency state
                if hasattr(self, '_emergency_stop_active'):
                    self._emergency_stop_active = True

                return True
            except Exception as e:
                print(f"Emergency stop error in genesis_real_mt5_connection: {e}")
                return False
    def validate_ftmo_compliance(self, trade_data: dict) -> bool:
            """GENESIS FTMO Compliance Validator"""
            # Daily drawdown check (5%)
            daily_loss = trade_data.get('daily_loss_pct', 0)
            if daily_loss > 5.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "daily_drawdown", 
                    "value": daily_loss,
                    "threshold": 5.0
                })
                return False

            # Maximum drawdown check (10%)
            max_drawdown = trade_data.get('max_drawdown_pct', 0)
            if max_drawdown > 10.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "max_drawdown", 
                    "value": max_drawdown,
                    "threshold": 10.0
                })
                return False

            # Risk per trade check (2%)
            risk_pct = trade_data.get('risk_percent', 0)
            if risk_pct > 2.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "risk_exceeded", 
                    "value": risk_pct,
                    "threshold": 2.0
                })
                return False

            return True
    def initialize_eventbus(self):
            """GENESIS EventBus Initialization"""
            try:
                self.event_bus = get_event_bus()
                if self.event_bus:
                    emit_event("module_initialized", {
                        "module": "genesis_real_mt5_connection",
                        "timestamp": datetime.now().isoformat(),
                        "status": "active"
                    })
            except Exception as e:
                print(f"EventBus initialization error in genesis_real_mt5_connection: {e}")
    """
    ARCHITECT MODE v7.0.0 Compliant MT5 Connection
    - Real data only
    - EventBus integrated
    - Telemetry enabled
    - No fallbacks allowed
    """
    
    def __init__(self):
        self.connection_status = "INITIALIZING"
        self.real_data_validated = False
        self.terminal_path = None
        self.account_info = None
        
    def emit_telemetry(self, event, data):
        """EventBus telemetry emission - MANDATORY"""
        telemetry_data = {
            "timestamp": datetime.now().isoformat(),
            "module": "GenesisRealMT5Connection",
            "event": event,
            "data": data,
            "architect_mode": "v7.0.0"
        }
        
        # Log to telemetry file
        telemetry_file = Path("telemetry_realtime.jsonl")
        with open(telemetry_file, "a", encoding="utf-8") as f:
            f.write(json.dumps(telemetry_data) + "\n")
    
    def validate_real_mt5_terminal(self):
        """
        Validates access to REAL MT5 terminal
        FAILS if no real terminal found - NO FALLBACKS
        """
        self.emit_telemetry("mt5_validation_start", {"status": "checking_terminal"})
        
        # Check for MT5 terminal installations
        possible_paths = [
            "C:\\Program Files\\MetaTrader 5\\terminal64.exe",
            "C:\\Program Files (x86)\\MetaTrader 5\\terminal64.exe",
            "C:\\Users\\%USERNAME%\\AppData\\Roaming\\MetaQuotes\\Terminal\\*\\terminal64.exe"
        ]
        
        for path in possible_paths:
            expanded_path = os.path.expandvars(path)
            if os.path.exists(expanded_path):
                self.terminal_path = expanded_path
                self.emit_telemetry("mt5_terminal_found", {"path": expanded_path})
                break
        
        if not self.terminal_path:
            self.emit_telemetry("mt5_terminal_not_found", {"error": "NO_REAL_TERMINAL"})
            raise Exception("‚ùå ARCHITECT MODE VIOLATION: No real MT5 terminal found. Install MetaTrader 5 terminal.")
        
        return True
    
    def establish_real_connection(self):
        """
        Establishes connection to REAL MT5 terminal
        NO SIMULATION MODE ALLOWED
        """
        try:
            import MetaTrader5 as mt5
            
            # Initialize with REAL terminal only
            if not mt5.initialize():
                error_info = mt5.last_error()
                self.emit_telemetry("mt5_connection_failed", {"error": error_info})
                raise Exception(f"‚ùå ARCHITECT MODE VIOLATION: MT5 initialization failed: {error_info}")
            
            # Get terminal info to validate it's real
            terminal_info = mt5.terminal_info()
            if not terminal_info:
                self.emit_telemetry("mt5_terminal_info_failed", {"error": "NO_TERMINAL_INFO"})
                raise Exception("‚ùå ARCHITECT MODE VIOLATION: Cannot get terminal info - not a real terminal")
            
            # Validate this is not a demo/test environment
            if hasattr(terminal_info, 'demo') and terminal_info.demo:
                self.emit_telemetry("mt5_demo_detected", {"error": "DEMO_ACCOUNT_PROHIBITED"})
                raise Exception("‚ùå ARCHITECT MODE VIOLATION: Demo accounts prohibited - REAL ACCOUNTS ONLY")
            
            self.connection_status = "CONNECTED_REAL"
            self.real_data_validated = True
            
            self.emit_telemetry("mt5_connection_established", {
                "status": "REAL_CONNECTION_ACTIVE",
                "terminal_info": str(terminal_info)
            })
            
            return True
            
        except ImportError:
            self.emit_telemetry("mt5_import_failed", {"error": "MODULE_NOT_INSTALLED"})
            raise Exception("‚ùå ARCHITECT MODE VIOLATION: MetaTrader5 module not installed")
        except Exception as e:
            self.emit_telemetry("mt5_connection_error", {"error": str(e)})
            raise
    
    def get_real_market_data(self, symbol="EURUSD"):
        """
        Retrieves REAL market data - NO MOCK DATA
        """
        if not self.real_data_validated:
            raise Exception("‚ùå ARCHITECT MODE VIOLATION: Real data not validated")
        
        try:
            import MetaTrader5 as mt5
            
            # Get real tick data
            tick = mt5.symbol_info_tick(symbol)
            if not tick:
                self.emit_telemetry("real_data_failed", {"symbol": symbol, "error": "NO_TICK_DATA"})
                raise Exception(f"‚ùå ARCHITECT MODE VIOLATION: No real tick data for {symbol}")
            
            self.emit_telemetry("real_data_retrieved", {
                "symbol": symbol,
                "bid": tick.bid,
                "ask": tick.ask,
                "time": tick.time
            })
            
            return {
                "symbol": symbol,
                "bid": tick.bid,
                "ask": tick.ask,
                "time": tick.time,
                "data_source": "REAL_MT5_TERMINAL"
            }
            
        except Exception as e:
            self.emit_telemetry("real_data_error", {"error": str(e)})
            raise Exception(f"‚ùå ARCHITECT MODE VIOLATION: Real data retrieval failed: {e}")
    
    def shutdown(self):
        """Clean shutdown of real MT5 connection"""
        try:
            import MetaTrader5 as mt5


# <!-- @GENESIS_MODULE_END: genesis_real_mt5_connection -->


# <!-- @GENESIS_MODULE_START: genesis_real_mt5_connection -->
            mt5.shutdown()
            self.emit_telemetry("mt5_shutdown", {"status": "CLEAN_SHUTDOWN"})
        except:
            pass

def main():
    """Test real MT5 connection - ARCHITECT MODE compliance check"""
    connection = GenesisRealMT5Connection()
    
    try:
        print("üîê ARCHITECT MODE v7.0.0 - MT5 Real Connection Test")
        print("üö´ NO MOCK DATA | üö´ NO SIMULATION | üì° LIVE DATA ONLY")
        print("-" * 60)
        
        # Step 1: Validate real terminal
        connection.validate_real_mt5_terminal()
        print(f"‚úÖ Real MT5 terminal found: {connection.terminal_path}")
        
        # Step 2: Establish real connection
        connection.establish_real_connection()
        print("‚úÖ Real MT5 connection established")
        
        # Step 3: Test real data retrieval
        real_data = connection.get_real_market_data("EURUSD")
        print(f"‚úÖ Real market data: {real_data}")
        
        print("\nüéØ ARCHITECT MODE COMPLIANCE: PASSED")
        print("üì° Real data access confirmed")
        
    except Exception as e:
        print(f"\nüö® ARCHITECT MODE VIOLATION: {e}")
        print("‚ùå System remains in quarantine until real MT5 access established")
        return False
    
    finally:
        connection.shutdown()
    
    return True

if __name__ == "__main__":
    main()
