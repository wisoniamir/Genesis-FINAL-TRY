# <!-- @GENESIS_MODULE_START: simple_event_bus -->

"""
Simplified EventBus for GENESIS test
"""
import json
import logging
from datetime import datetime
from threading import Lock

class EventBus:
    def __init__(self):
        self._emit_startup_telemetry()
        self.subscribers = {}
        self.event_log = []
        self.lock = Lock()
        
        # Initialize logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger('SimpleEventBus')
    
    
        # GENESIS Phase 91 Telemetry Injection
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", {
                "module": __name__,
                "status": "running",
                "timestamp": datetime.now().isoformat(),
                "phase": "91_telemetry_enforcement"
            })
        def subscribe(self, topic, callback, module_name="Unknown"):
        """Subscribe to events on a specific topic"""
        with self.lock:
            if topic not in self.subscribers:
                self.subscribers[topic] = []
            
            self.subscribers[topic].append(callback)
            self.logger.info(f"Module '{module_name}' subscribed to topic '{topic}'")
    
    def emit_event(self, topic, data, producer="Unknown"):
        """Emit an event to all subscribers of a topic"""
        with self.lock:
            # Create event object
            event = {
                "topic": topic,
                "data": data,
                "producer": producer,
                "timestamp": datetime.now().isoformat(),
                "event_id": f"{topic}_{len(self.event_log)}"
            }
            
            # Log event
            self.event_log.append(event)
            
            # Emit to subscribers
            if topic in self.subscribers:
                for callback in self.subscribers[topic]:
                    try:
                        callback(event)
                    except Exception as e:
                        self.logger.error(f"Error in callback for topic '{topic}': {e}")
                        
                self.logger.info(f"Event emitted: {producer} -> [{topic}] -> {len(self.subscribers[topic])} subscribers")
            else:
                self.logger.warning(f"No subscribers for topic '{topic}'")

# Global EventBus instance - SINGLETON PATTERN
_event_bus_instance = None

def get_event_bus():
    """Get the global EventBus instance"""
    global _event_bus_instance
    if _event_bus_instance is None:
        _event_bus_instance = EventBus()
    return _event_bus_instance

def emit_event(topic, data, producer="Unknown"):
    """Convenience function to emit events"""
    bus = get_event_bus()
    bus.emit_event(topic, data, producer)

def subscribe_to_event(topic, callback, module_name="Unknown"):
    """Convenience function to subscribe to events"""
    bus = get_event_bus()
    bus.subscribe(topic, callback, module_name)

    def log_state(self):
        """Phase 91 Telemetry Enforcer - Log current module state"""
        state_data = {
            "module": __name__,
            "timestamp": datetime.now().isoformat(),
            "status": "active",
            "phase": "91_telemetry_enforcement"
        }
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", state_data)
        return state_data
        

# <!-- @GENESIS_MODULE_END: simple_event_bus -->