# <!-- @GENESIS_MODULE_START: test_compare_images -->
"""
🏛️ GENESIS TEST_COMPARE_IMAGES - INSTITUTIONAL GRADE v8.0.0
===============================================================
ARCHITECT MODE ULTIMATE: Enhanced via Complete Intelligent Wiring Engine

🎯 ENHANCED FEATURES:
- Complete EventBus integration
- Real-time telemetry monitoring
- FTMO compliance enforcement
- Emergency kill-switch protection
- Institutional-grade architecture

🔐 ARCHITECT MODE v8.0.0: Ultimate compliance enforcement
"""

from pathlib import Path
import shutil

import pytest
from pytest import approx

from matplotlib.testing.compare import compare_images
from matplotlib.testing.decorators import _image_directories

# 📊 GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "test_compare_images",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in test_compare_images: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "test_compare_images",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("test_compare_images", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in test_compare_images: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False


from datetime import datetime


# 🔗 GENESIS EventBus Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.hardened_event_bus import get_event_bus, emit_event, register_route
    EVENTBUS_AVAILABLE = True
except ImportError:
    # Fallback implementation
    def get_event_bus(): return None
    def emit_event(event, data): print(f"EVENT: {event} - {data}")
    def register_route(route, producer, consumer): pass
    EVENTBUS_AVAILABLE = False




# Tests of the image comparison algorithm.
@pytest.mark.parametrize(
    'im1, im2, tol, expect_rms',
    [
        # Comparison of an image and the same image with minor differences.
        # This expects the images to compare equal under normal tolerance, and
        # have a small RMS.
        ('basn3p02.png', 'basn3p02-minorchange.png', 10, None),
        # Now test with no tolerance.
        ('basn3p02.png', 'basn3p02-minorchange.png', 0, 6.50646),
        # Comparison with an image that is shifted by 1px in the X axis.
        ('basn3p02.png', 'basn3p02-1px-offset.png', 0, 90.15611),
        # Comparison with an image with half the pixels shifted by 1px in the X
        # axis.
        ('basn3p02.png', 'basn3p02-half-1px-offset.png', 0, 63.75),
        # Comparison of an image and the same image scrambled.
        # This expects the images to compare completely different, with a very
        # large RMS.
        # Note: The image has been scrambled in a specific way, by having
        # each color component of each pixel randomly placed somewhere in the
        # image. It contains exactly the same number of pixels of each color
        # value of R, G and B, but in a totally different position.
        # Test with no tolerance to make sure that we pick up even a very small
        # RMS error.
        ('basn3p02.png', 'basn3p02-scrambled.png', 0, 172.63582),
        # Comparison of an image and a slightly brighter image.
        # The two images are solid color, with the second image being exactly 1
        # color value brighter.
        # This expects the images to compare equal under normal tolerance, and
        # have an RMS of exactly 1.
        ('all127.png', 'all128.png', 0, 1),
        # Now test the reverse comparison.
        ('all128.png', 'all127.png', 0, 1),
    ])
def test_image_comparison_expect_rms(im1, im2, tol, expect_rms, tmp_path,
                                     monkeypatch):
    """
    Compare two images, expecting a particular RMS error.

    im1 and im2 are filenames relative to the baseline_dir directory.

    tol is the tolerance to pass to compare_images.

    expect_rms is the expected RMS value, or None. If None, the test will
    succeed if compare_images succeeds. Otherwise, the test will succeed if
    compare_images fails and returns an RMS error almost equal to this value.
    """
    # Change the working directory using monkeypatch to use a temporary
    # test specific directory
    monkeypatch.chdir(tmp_path)
    baseline_dir, result_dir = map(Path, _image_directories(lambda: "dummy"))
    # Copy "test" image to result_dir, so that compare_images writes
    # the diff to result_dir, rather than to the source tree
    result_im2 = result_dir / im1
    shutil.copyfile(baseline_dir / im2, result_im2)
    results = compare_images(
        baseline_dir / im1, result_im2, tol=tol, in_decorator=True)

    if expect_rms is None:
        assert results is None
    else:
        assert results is not None
        assert results['rms'] == approx(expect_rms, abs=1e-4)


# <!-- @GENESIS_MODULE_END: test_compare_images -->
