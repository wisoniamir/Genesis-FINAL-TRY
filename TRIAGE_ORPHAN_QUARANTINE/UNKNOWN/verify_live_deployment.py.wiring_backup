#!/usr/bin/env python3
"""
GENESIS Live Deployment Verification
Final check before going live with real trading
"""

import json
import os
import sys
from pathlib import Path
from datetime import datetime

def verify_deployment_readiness():
    """Comprehensive deployment readiness check"""
    
    print("🚀 GENESIS LIVE DEPLOYMENT VERIFICATION")
    print("=" * 50)
    print(f"Timestamp: {datetime.now().isoformat()}")
    print()
    
    checks_passed = 0
    total_checks = 8
    
    # Check 1: System lock state
    try:
        lock_file = Path('genesis_lock_state.json')
        if lock_file.exists():
            with open(lock_file, 'r') as f:
                lock_data = json.load(f)
            
            if lock_data.get('metadata', {}).get('system_locked'):
                print("✅ System Lock State: SECURED")
                checks_passed += 1
            else:
                print("❌ System Lock State: NOT SECURED")
        else:
            print("❌ System Lock State: MISSING LOCK FILE")
    except Exception as e:
        print(f"❌ System Lock State: ERROR - {e}")
    
    # Check 2: Installer package
    try:
        dist_dir = Path('dist')
        installer_files = list(dist_dir.glob('genesis_v1_installer_*.zip'))
        
        if installer_files:
            latest_installer = max(installer_files, key=lambda x: x.stat().st_mtime)
            size_mb = latest_installer.stat().st_size / (1024 * 1024)
            print(f"✅ Installer Package: {latest_installer.name} ({size_mb:.1f} MB)")
            checks_passed += 1
        else:
            print("❌ Installer Package: NOT FOUND")
    except Exception as e:
        print(f"❌ Installer Package: ERROR - {e}")
    
    # Check 3: GUI Launcher
    try:
        launcher_file = Path('genesis_launcher.py')
        batch_file = Path('genesis_launcher.bat')
        
        if launcher_file.exists() and batch_file.exists():
            print("✅ GUI Launcher: READY")
            checks_passed += 1
        else:
            print("❌ GUI Launcher: MISSING FILES")
    except Exception as e:
        print(f"❌ GUI Launcher: ERROR - {e}")
    
    # Check 4: Build status
    try:
        build_file = Path('build_status.json')
        if build_file.exists():
            with open(build_file, 'r') as f:
                build_data = json.load(f)
            
            final_status = build_data.get('final_system_status', 'UNKNOWN')
            if final_status == 'DEPLOYMENT_READY':
                print("✅ Build Status: DEPLOYMENT_READY")
                checks_passed += 1
            else:
                print(f"❌ Build Status: {final_status}")
        else:
            print("❌ Build Status: MISSING FILE")
    except Exception as e:
        print(f"❌ Build Status: ERROR - {e}")
    
    # Check 5: Core modules
    try:
        core_modules = [
            'auto_execution_manager.py',
            'live_risk_governor.py',
            'dashboard.py'
        ]
        
        missing_modules = []
        for module in core_modules:
            if not Path(module).exists():
                missing_modules.append(module)
        
        if not missing_modules:
            print("✅ Core Modules: ALL PRESENT")
            checks_passed += 1
        else:
            print(f"❌ Core Modules: MISSING {', '.join(missing_modules)}")
    except Exception as e:
        print(f"❌ Core Modules: ERROR - {e}")
    
    # Check 6: System tree
    try:
        tree_file = Path('system_tree.json')
        if tree_file.exists():
            with open(tree_file, 'r') as f:
                tree_data = json.load(f)
            
            nodes = len(tree_data.get('nodes', []))
            if nodes >= 70:
                print(f"✅ System Tree: {nodes} NODES REGISTERED")
                checks_passed += 1
            else:
                print(f"❌ System Tree: ONLY {nodes} NODES")
        else:
            print("❌ System Tree: MISSING FILE")
    except Exception as e:
        print(f"❌ System Tree: ERROR - {e}")
    
    # Check 7: Module registry
    try:
        registry_file = Path('module_registry.json')
        if registry_file.exists():
            with open(registry_file, 'r') as f:
                registry_data = json.load(f)
            
            modules = len(registry_data.get('modules', []))
            if modules >= 70:
                print(f"✅ Module Registry: {modules} MODULES ACTIVE")
                checks_passed += 1
            else:
                print(f"❌ Module Registry: ONLY {modules} MODULES")
        else:
            print("❌ Module Registry: MISSING FILE")
    except Exception as e:
        print(f"❌ Module Registry: ERROR - {e}")
    
    # Check 8: Requirements file
    try:
        req_file = Path('requirements.txt')
        if req_file.exists():
            with open(req_file, 'r') as f:
                requirements = f.read().strip().split('\n')
            
            if len(requirements) >= 5:
                print(f"✅ Requirements: {len(requirements)} DEPENDENCIES LISTED")
                checks_passed += 1
            else:
                print(f"❌ Requirements: INSUFFICIENT DEPENDENCIES")
        else:
            print("❌ Requirements: MISSING FILE")
    except Exception as e:
        print(f"❌ Requirements: ERROR - {e}")
    
    print()
    print("=" * 50)
    
    # Final assessment
    success_rate = (checks_passed / total_checks) * 100
    
    print(f"DEPLOYMENT READINESS: {checks_passed}/{total_checks} checks passed ({success_rate:.1f}%)")
    
    if success_rate >= 100:
        print("🎉 DEPLOYMENT STATUS: ✅ FULLY READY FOR LIVE TRADING")
        print("🚀 GO LIVE: All systems verified and operational")
        deployment_ready = True
    elif success_rate >= 75:
        print("⚠️ DEPLOYMENT STATUS: ⚠️ MOSTLY READY (minor issues)")
        print("🔧 RECOMMENDATION: Fix remaining issues before going live")
        deployment_ready = False
    else:
        print("❌ DEPLOYMENT STATUS: ❌ NOT READY")
        print("🛑 CRITICAL: Resolve all issues before deployment")
        deployment_ready = False
    
    print()
    print("🎯 NEXT STEPS:")
    if deployment_ready:
        print("1. Extract the installer ZIP package")
        print("2. Run genesis_launcher.bat")
        print("3. Connect to MetaTrader 5")
        print("4. Start with demo trading")
        print("5. Monitor performance closely")
        print("6. Gradually move to live trading")
    else:
        print("1. Review failed checks above")
        print("2. Fix any missing components")
        print("3. Re-run this verification")
        print("4. Only proceed when 100% ready")
    
    print()
    print("🔥 GENESIS v1.0.0 - READY TO CHANGE THE TRADING GAME! 🔥")
    
    return deployment_ready

if __name__ == "__main__":
    ready = verify_deployment_readiness()
    sys.exit(0 if ready else 1)
