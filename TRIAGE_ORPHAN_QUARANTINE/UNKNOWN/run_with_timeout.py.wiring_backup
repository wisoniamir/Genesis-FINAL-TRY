#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GENESIS AI TRADING BOT SYSTEM - Script Runner Utility
Safe Python script executor with timeout and proper cleanup
ARCHITECT MODE: v2.7
"""
import os
import sys
import time
import signal
import subprocess
import argparse
from datetime import datetime

def log_message(message, level="INFO"):
    """Log a message with timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] [{level}] {message}")

def run_script_with_timeout(script_path, timeout_seconds=30, args=None):
    """
    Run a Python script with a timeout, ensuring proper process termination
    
    Args:
        script_path: Path to the Python script to run
        timeout_seconds: Maximum runtime in seconds before force termination
        args: Additional command-line arguments to pass to the script
    
    Returns:
        int: Return code from the process
    """
    if not os.path.exists(script_path):
        log_message(f"Script not found: {script_path}", "ERROR")
        return 1
    
    # Build command
    cmd = [sys.executable, script_path]
    if args:
        cmd.extend(args)
    
    log_message(f"Starting script: {' '.join(cmd)}")
    log_message(f"Timeout set to {timeout_seconds} seconds")
    
    # Start process
    process = None
    try:
        # Use subprocess.Popen to control the process
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
            bufsize=1  # Line-buffered
        )
        
        start_time = time.time()
        
        # Monitor the process
        while process.poll() is None:
            # Check if we've exceeded the timeout
            if time.time() - start_time > timeout_seconds:
                log_message(f"Timeout ({timeout_seconds}s) exceeded, terminating process", "WARNING")
                
                # Try graceful termination first
                process.terminate()
                
                # Give it a moment to terminate gracefully
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    # If still running, force kill
                    log_message("Process did not terminate gracefully, force killing", "WARNING")
                    process.kill()
                
                return -1
              # Read output while process is running
            if process and process.stdout:
                stdout_line = process.stdout.readline()
                if stdout_line:
                    print(stdout_line.rstrip())
            
            if process and process.stderr:
                stderr_line = process.stderr.readline()
                if stderr_line:
                    print(f"ERROR: {stderr_line.rstrip()}", file=sys.stderr)
            
            # Sleep briefly to prevent CPU thrashing
            time.sleep(0.1)
        
        # Process completed, get any remaining output
        stdout, stderr = process.communicate()
        if stdout:
            print(stdout)
        if stderr:
            print(f"ERROR: {stderr}", file=sys.stderr)
        
        return process.returncode
    
    except KeyboardInterrupt:
        log_message("Received keyboard interrupt, terminating script", "WARNING")
        if process and process.poll() is None:
            # Try graceful termination
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                # Force kill if necessary
                process.kill()
        return -2
    
    except Exception as e:
        log_message(f"Error running script: {str(e)}", "ERROR")
        if process and process.poll() is None:
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
        return -3

def main():
    """Parse arguments and run script"""
    parser = argparse.ArgumentParser(
        description="Run a Python script with timeout and proper termination"
    )
    parser.add_argument(
        "script", 
        help="Path to the Python script to run"
    )
    parser.add_argument(
        "--timeout", 
        type=int, 
        default=60,
        help="Timeout in seconds (default: 60)"
    )
    parser.add_argument(
        "args", 
        nargs="*",
        help="Additional arguments to pass to the script"
    )
    
    args = parser.parse_args()
    
    log_message(f"GENESIS Safe Script Runner - Running {args.script}")
    result = run_script_with_timeout(args.script, args.timeout, args.args)
    
    if result == 0:
        log_message(f"Script completed successfully with exit code {result}")
    else:
        log_message(f"Script exited with code {result}", "WARNING")
    
    return result

if __name__ == "__main__":
    sys.exit(main())
