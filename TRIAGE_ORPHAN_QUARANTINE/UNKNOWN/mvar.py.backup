# <!-- @GENESIS_MODULE_START: mvar -->
"""
🏛️ GENESIS MVAR - INSTITUTIONAL GRADE v8.0.0
===============================================================
ARCHITECT MODE ULTIMATE: Enhanced via Complete Intelligent Wiring Engine

🎯 ENHANCED FEATURES:
- Complete EventBus integration
- Real-time telemetry monitoring
- FTMO compliance enforcement
- Emergency kill-switch protection
- Institutional-grade architecture

🔐 ARCHITECT MODE v8.0.0: Ultimate compliance enforcement
"""


# 📊 GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "mvar",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in mvar: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "mvar",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("mvar", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in mvar: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False


from datetime import datetime


# 🔗 GENESIS EventBus Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.hardened_event_bus import get_event_bus, emit_event, register_route
    EVENTBUS_AVAILABLE = True
except ImportError:
    # Fallback implementation
    def get_event_bus(): return None
    def emit_event(event, data): print(f"EVENT: {event} - {data}")
    def register_route(route, producer, consumer): pass
    EVENTBUS_AVAILABLE = False


MVAR_ENTRIES = {
    "hasc": ("OS/2", "sTypoAscender"),  # horizontal ascender
    "hdsc": ("OS/2", "sTypoDescender"),  # horizontal descender
    "hlgp": ("OS/2", "sTypoLineGap"),  # horizontal line gap
    "hcla": ("OS/2", "usWinAscent"),  # horizontal clipping ascent
    "hcld": ("OS/2", "usWinDescent"),  # horizontal clipping descent
    "vasc": ("vhea", "ascent"),  # vertical ascender
    "vdsc": ("vhea", "descent"),  # vertical descender
    "vlgp": ("vhea", "lineGap"),  # vertical line gap
    "hcrs": ("hhea", "caretSlopeRise"),  # horizontal caret rise
    "hcrn": ("hhea", "caretSlopeRun"),  # horizontal caret run
    "hcof": ("hhea", "caretOffset"),  # horizontal caret offset
    "vcrs": ("vhea", "caretSlopeRise"),  # vertical caret rise
    "vcrn": ("vhea", "caretSlopeRun"),  # vertical caret run
    "vcof": ("vhea", "caretOffset"),  # vertical caret offset
    "xhgt": ("OS/2", "sxHeight"),  # x height
    "cpht": ("OS/2", "sCapHeight"),  # cap height
    "sbxs": ("OS/2", "ySubscriptXSize"),  # subscript em x size
    "sbys": ("OS/2", "ySubscriptYSize"),  # subscript em y size
    "sbxo": ("OS/2", "ySubscriptXOffset"),  # subscript em x offset
    "sbyo": ("OS/2", "ySubscriptYOffset"),  # subscript em y offset
    "spxs": ("OS/2", "ySuperscriptXSize"),  # superscript em x size
    "spys": ("OS/2", "ySuperscriptYSize"),  # superscript em y size
    "spxo": ("OS/2", "ySuperscriptXOffset"),  # superscript em x offset
    "spyo": ("OS/2", "ySuperscriptYOffset"),  # superscript em y offset
    "strs": ("OS/2", "yStrikeoutSize"),  # strikeout size
    "stro": ("OS/2", "yStrikeoutPosition"),  # strikeout offset
    "unds": ("post", "underlineThickness"),  # underline size
    "undo": ("post", "underlinePosition"),  # underline offset
    #'gsp0': ('gasp', 'gaspRange[0].rangeMaxPPEM'),	 # gaspRange[0]
    #'gsp1': ('gasp', 'gaspRange[1].rangeMaxPPEM'),	 # gaspRange[1]
    #'gsp2': ('gasp', 'gaspRange[2].rangeMaxPPEM'),	 # gaspRange[2]
    #'gsp3': ('gasp', 'gaspRange[3].rangeMaxPPEM'),	 # gaspRange[3]
    #'gsp4': ('gasp', 'gaspRange[4].rangeMaxPPEM'),	 # gaspRange[4]
    #'gsp5': ('gasp', 'gaspRange[5].rangeMaxPPEM'),	 # gaspRange[5]
    #'gsp6': ('gasp', 'gaspRange[6].rangeMaxPPEM'),	 # gaspRange[6]
    #'gsp7': ('gasp', 'gaspRange[7].rangeMaxPPEM'),	 # gaspRange[7]
    #'gsp8': ('gasp', 'gaspRange[8].rangeMaxPPEM'),	 # gaspRange[8]
    #'gsp9': ('gasp', 'gaspRange[9].rangeMaxPPEM'),	 # gaspRange[9]
}


# <!-- @GENESIS_MODULE_END: mvar -->
