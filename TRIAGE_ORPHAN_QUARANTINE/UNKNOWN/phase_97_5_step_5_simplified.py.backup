# <!-- @GENESIS_MODULE_START: phase_97_5_step_5_simplified -->
"""
üèõÔ∏è GENESIS PHASE_97_5_STEP_5_SIMPLIFIED - INSTITUTIONAL GRADE v8.0.0
===============================================================
ARCHITECT MODE ULTIMATE: Enhanced via Complete Intelligent Wiring Engine

üéØ ENHANCED FEATURES:
- Complete EventBus integration
- Real-time telemetry monitoring
- FTMO compliance enforcement
- Emergency kill-switch protection
- Institutional-grade architecture

üîê ARCHITECT MODE v8.0.0: Ultimate compliance enforcement
"""


# üìä GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "phase_97_5_step_5_simplified",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in phase_97_5_step_5_simplified: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "phase_97_5_step_5_simplified",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("phase_97_5_step_5_simplified", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in phase_97_5_step_5_simplified: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False



# üîó GENESIS EventBus Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.hardened_event_bus import get_event_bus, emit_event, register_route
    EVENTBUS_AVAILABLE = True
except ImportError:
    # Fallback implementation
    def get_event_bus(): return None
    def emit_event(event, data): print(f"EVENT: {event} - {data}")
    def register_route(route, producer, consumer): pass
    EVENTBUS_AVAILABLE = False


#!/usr/bin/env python3
"""
üß™ PHASE 97.5 STEP 5: PROMPT ARCHITECT VALIDATOR - SIMPLIFIED
Final validation with Guardian comparison
"""

import json
import os
from datetime import datetime
from pathlib import Path

def run_prompt_audit(mode="strict", compare_with="guardian"):
    """Step 5: Run Prompt Architect with elevated scope"""
    print("üß™ STEP 5: RE-RUNNING PROMPT ARCHITECT VALIDATOR")
    print("="*70)
    print(f"üîç Mode: {mode.upper()}")
    print(f"üîç Comparison Target: {compare_with.upper()}")
    
    workspace_root = Path(".")
    
    # Initialize default values
    prompt_architect_metrics = {"total_modules": 0, "total_routes": 0, "compliance_violations": 0}
    guardian_metrics = {"guardian_active": False, "guardian_status": "UNKNOWN", "total_repairs": 0}
    build_status = {}
    
    # Load system state
    print("\nüîç LOADING SYSTEM STATE...")
    
    try:
        with open("system_tree.json", 'r', encoding='utf-8') as f:
            system_tree = json.load(f)
        prompt_architect_metrics["total_modules"] = len(system_tree.get("modules", {}))
        print(f"   ‚úÖ System Tree: {prompt_architect_metrics['total_modules']} modules")
    except Exception as e:
        print(f"   ‚ùå System Tree: Error - {e}")
    
    try:
        with open("event_bus.json", 'r', encoding='utf-8') as f:
            event_bus = json.load(f)
        prompt_architect_metrics["total_routes"] = len(event_bus.get("routes", {}))
        print(f"   ‚úÖ EventBus: {prompt_architect_metrics['total_routes']} routes")
    except Exception as e:
        print(f"   ‚ùå EventBus: Error - {e}")
    
    try:
        with open("build_status.json", 'r', encoding='utf-8') as f:
            build_status = json.load(f)
        
        # Check compliance violations
        compliance_scan = build_status.get("architect_compliance_emergency_scan", {})
        prompt_architect_metrics["compliance_violations"] = compliance_scan.get("total_violations", 0)
        
        # Check Guardian status
        guardian_metrics["guardian_active"] = build_status.get("guardian_active", False)
        guardian_metrics["guardian_status"] = build_status.get("guardian_status", "UNKNOWN")
        guardian_metrics["total_repairs"] = build_status.get("total_repairs", 0)
        
        print(f"   ‚úÖ Build Status: Loaded successfully")
        print(f"   ‚úÖ Compliance Violations: {prompt_architect_metrics['compliance_violations']}")
        
    except Exception as e:
        print(f"   ‚ùå Build Status: Error - {e}")
    
    # Check Phase 97.5 completion
    print("\nüîç CHECKING PHASE 97.5 COMPLETION...")
    
    steps_completed = 0
    for step in range(1, 6):
        step_key = f"phase_97_5_step_{step}"
        if step_key in build_status and build_status[step_key].get("status") == "completed":
            steps_completed += 1
            print(f"   ‚úÖ Step {step}: COMPLETED")
        else:
            print(f"   ‚è≥ Step {step}: PENDING")
    
    # Guardian comparison
    print("\nüîç COMPARING WITH GUARDIAN...")
    print(f"   ‚úÖ Guardian Active: {guardian_metrics['guardian_active']}")
    print(f"   ‚úÖ Guardian Status: {guardian_metrics['guardian_status']}")
    print(f"   ‚úÖ Guardian Repairs: {guardian_metrics['total_repairs']}")
    
    # Sync verification
    print("\nüîç VERIFYING SYNC STATUS...")
    
    sync_checks = {
        "phase_97_5_complete": steps_completed == 5,
        "zero_violations": prompt_architect_metrics["compliance_violations"] == 0,
        "guardian_operational": guardian_metrics["guardian_active"],
        "modules_registered": prompt_architect_metrics["total_modules"] > 0,
        "eventbus_operational": prompt_architect_metrics["total_routes"] > 0
    }
    
    all_checks_passed = all(sync_checks.values())
    final_status = "IN_SYNC" if all_checks_passed else "OUT_OF_SYNC"
    
    for check_name, check_result in sync_checks.items():
        status = "‚úÖ" if check_result else "‚ùå"
        print(f"   {status} {check_name.replace('_', ' ').title()}: {check_result}")
    
    # Save audit results
    print("\nüîç SAVING AUDIT RESULTS...")
    
    audit_results = {
        "audit_timestamp": datetime.now().isoformat(),
        "mode": mode,
        "comparison_target": compare_with,
        "prompt_architect_metrics": prompt_architect_metrics,
        "guardian_metrics": guardian_metrics,
        "sync_checks": sync_checks,
        "final_status": final_status
    }
    
    # Create prompt_architect.log
    with open("prompt_architect.log", 'w', encoding='utf-8') as f:
        f.write(f"# PROMPT ARCHITECT AUDIT LOG - PHASE 97.5\n")
        f.write(f"# Timestamp: {datetime.now().isoformat()}\n")
        f.write(f"# Mode: {mode}\n")
        f.write(f"# Comparison: {compare_with}\n")
        f.write(f"#\n")
        f.write(f"STATUS: {final_status}\n")
    
    # Update build_status.json
    try:
        build_status.update({
            "phase_97_5_step_5": {
                "timestamp": datetime.now().isoformat(),
                "prompt_audit_completed": True,
                "final_status": final_status,
                "status": "completed"
            },
            "phase_97_5_complete": {
                "timestamp": datetime.now().isoformat(),
                "all_steps_completed": steps_completed == 5,
                "final_sync_status": final_status,
                "prompt_architect_guardian_sync": final_status == "IN_SYNC"
            }
        })
        
        with open("build_status.json", 'w', encoding='utf-8') as f:
            json.dump(build_status, f, indent=2)
        
        print("   ‚úÖ build_status.json updated")
        
    except Exception as e:
        print(f"   ‚ùå Error updating build_status.json: {e}")
    
    print("   ‚úÖ prompt_architect.log created")
    
    # Final verdict
    print(f"\nüéØ FINAL VERDICT: {final_status}")
    
    if final_status == "IN_SYNC":
        print("‚úÖ PROMPT ARCHITECT AND GUARDIAN ARE FULLY SYNCHRONIZED")
        print("‚úÖ ALL ARCHITECTURAL COMPLIANCE REQUIREMENTS MET")
        print("‚úÖ PHASE 97.5 SUCCESSFULLY COMPLETED")
    else:
        print("‚ùå SYNC ISSUES DETECTED - MANUAL INTERVENTION REQUIRED")
        print("‚ùå REVIEW AUDIT RESULTS FOR SPECIFIC ISSUES")
    
    return audit_results

def execute_step_5():
    """Execute complete Step 5"""
    print("üß™ PHASE 97.5 STEP 5: RE-RUN PROMPT ARCHITECT VALIDATOR")
    print("="*70)
    
    audit_results = run_prompt_audit(mode="strict", compare_with="guardian")
    
    print("\n‚úÖ STEP 5 COMPLETE: Prompt Architect validator executed")
    print("="*70)
    
    return audit_results

if __name__ == "__main__":
    execute_step_5()


# <!-- @GENESIS_MODULE_END: phase_97_5_step_5_simplified -->
