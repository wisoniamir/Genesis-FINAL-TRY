# <!-- @GENESIS_MODULE_START: clean_exit_test -->

from datetime import datetime\nfrom event_bus import EventBus
"""
Clean Exit Smart Monitor Test
============================
Forces clean shutdown of all threads and processes
"""

import os
import sys
import time
import threading
import signal
from smart_execution_monitor import SmartExecutionMonitor
from event_bus import emit_event

def cleanup_and_exit(exit_code=0):
    """Force cleanup and exit"""
    print("CLEANUP: Stopping all threads...")
    
    # Kill all daemon threads
    for thread in threading.enumerate():
        if thread != threading.current_thread() and thread.daemon:
            try:
                thread.join(timeout=0.1)
            except:
    raise NotImplementedError("Real implementation required - no stubs allowed in production")
    print("CLEANUP: Forcing exit...")
    os._exit(exit_code)

def run_quick_test():
    """Run test with forced cleanup"""
    print("STARTING QUICK TEST...")
    
    try:
        # Initialize monitor
        print("Creating SmartExecutionMonitor...")
        monitor = SmartExecutionMonitor()
        print("✓ Monitor created")
        
        # Send test event
        print("Sending test trade...")
        emit_event("LiveTradeExecuted", {
            "trade_id": "CLEAN_TEST_001",
            "symbol": "EURUSD",
            "pnl": -500.0,  # Large loss to trigger alerts
            "slippage_pips": 3.0  # High slippage
        }, "CleanTest")
        print("✓ Event sent")
        
        # Brief wait for processing
        print("Processing events...")
        time.sleep(2)
        print("✓ Processing complete")
        
        print("TEST COMPLETED SUCCESSFULLY!")
        return True
        
    except Exception as e:
        print(f"TEST FAILED: {e}")
        return False
    
    finally:
        # Always cleanup
        cleanup_and_exit(0)

if __name__ == "__main__":
    # Set up signal handlers for forced exit
    def signal_handler(signum, frame):
        print(f"Signal {signum} received, forcing exit...")
        cleanup_and_exit(1)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Run test with timeout
    print("CLEAN EXIT TEST STARTING...")
    
    # Start watchdog timer
    def watchdog():
        time.sleep(10)  # Max 10 seconds
        print("WATCHDOG: Test timeout, forcing exit!")
        cleanup_and_exit(2)
    
    watchdog_thread = threading.Thread(target=watchdog, daemon=True)
    watchdog_thread.start()
    
    # Run the actual test
    success = run_quick_test()
    
    # Should never reach here due to cleanup_and_exit in finally block
    print(f"Test result: {success}")
    cleanup_and_exit(0)


# <!-- @GENESIS_MODULE_END: clean_exit_test -->