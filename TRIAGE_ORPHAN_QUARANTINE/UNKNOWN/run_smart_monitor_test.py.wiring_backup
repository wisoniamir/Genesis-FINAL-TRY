"""
GENESIS AI TRADING BOT SYSTEM - SmartExecutionMonitor Test Launcher
ARCHITECT LOCK-IN v2.7 COMPLIANT
"""

import subprocess
import time
import os
import sys
import json
import logging
from datetime import datetime

# Set up logging
log_dir = "logs/smart_monitor"
os.makedirs(log_dir, exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] - %(message)s",
    handlers=[
        logging.FileHandler(f"{log_dir}/test_launcher_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.log"),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("SmartMonitorTestLauncher")

def run_test():
    """Run the SmartExecutionMonitor test with proper sequencing"""
    logger.info("üöÄ Starting GENESIS SmartExecutionMonitor Test Sequence")
    
    # Step 1: Start SmartExecutionMonitor in the background
    logger.info("Starting SmartExecutionMonitor...")
    monitor_process = subprocess.Popen(
        [sys.executable, "smart_execution_monitor.py"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    logger.info(f"SmartExecutionMonitor started with PID: {monitor_process.pid}")
    
    # Give the monitor time to initialize and register event handlers
    logger.info("Waiting for SmartExecutionMonitor to initialize...")
    time.sleep(5)
    
    # Step 2: Run the test script
    logger.info("Starting test script...")
    test_process = subprocess.Popen(
        [sys.executable, "test_smart_monitor.py"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True
    )
    
    # Wait for the test to complete
    stdout, stderr = test_process.communicate()
    
    # Log test output
    logger.info("Test script completed.")
    logger.info(f"Test exit code: {test_process.returncode}")
    logger.info("Test stdout:")
    for line in stdout.split('\n'):
        if line.strip():
            logger.info(f"  {line.strip()}")
    
    if stderr:
        logger.warning("Test stderr:")
        for line in stderr.split('\n'):
            if line.strip():
                logger.warning(f"  {line.strip()}")
    
    # Terminate SmartExecutionMonitor
    logger.info("Terminating SmartExecutionMonitor...")
    monitor_process.terminate()
    monitor_process.wait(timeout=5)
    logger.info("SmartExecutionMonitor terminated")
    
    # Check test results file
    result_files = [f for f in os.listdir(log_dir) if f.startswith("smart_monitor_test_") and f.endswith(".json")]
    if result_files:
        latest_result = max(result_files, key=lambda x: os.path.getmtime(os.path.join(log_dir, x)))
        result_path = os.path.join(log_dir, latest_result)
        logger.info(f"Reading test results from: {result_path}")
        
        try:
            with open(result_path, 'r') as f:
                results = json.load(f)
            
            # Print test summary
            print("\n" + "="*80)
            print(f"üßæ SMART MONITOR TEST SUMMARY: {results['test_result']}")
            if "test_completion_time" in results and "test_start_time" in results:
                duration = (datetime.fromisoformat(results['test_completion_time']) - 
                           datetime.fromisoformat(results['test_start_time'])).total_seconds()
                print(f"‚è±Ô∏è Duration: {duration} seconds")
            print(f"üìä Events Received: {len(results.get('events_received', []))}")
            print(f"‚úÖ Slippage Alert: {'PASSED' if results.get('slippage_alert_received', False) else 'FAILED'}")
            print(f"‚úÖ Latency Alert: {'PASSED' if results.get('latency_alert_received', False) else 'FAILED'}")
            print(f"‚úÖ KillSwitch Trigger: {'PASSED' if results.get('killswitch_triggered', False) else 'FAILED'}")
            print(f"‚úÖ Pattern Recalibration: {'PASSED' if results.get('recalibration_requested', False) else 'FAILED'}")
            print("="*80 + "\n")
            
            return results['test_result'] == "PASSED"
        except Exception as e:
            logger.error(f"Error processing test results: {e}")
            return False
    else:
        logger.error("No test result file found!")
        return False

if __name__ == "__main__":
    try:
        success = run_test()
        sys.exit(0 if success else 1)
    except Exception as e:
        logger.exception(f"Test launcher failed: {e}")
        sys.exit(1)
