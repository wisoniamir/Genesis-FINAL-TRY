# <!-- @GENESIS_MODULE_START: activate_architect_mode -->

#!/usr/bin/env python3
"""
üß† GENESIS ARCHITECT MODE v6.0 ‚Äî MASTER ENFORCEMENT LAUNCHER
üîê COMPREHENSIVE SYSTEM ACTIVATION AND ENFORCEMENT

This is the master launcher for GENESIS ARCHITECT MODE v6.0.
It coordinates all enforcement components and ensures full system compliance.
"""

from event_bus import EventBus

import os
import sys
import json
import time
import logging
from telemetry_manager import TelemetryManager
import subprocess
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Any, Optional
import threading

# Import our enforcement modules
try:
    from genesis_architect_agent import GenesisArchitectAgent
    from genesis_watchdog import start_watchdog
    from validate_system_compliance import GenesisSystemValidator
    from validate_module_hashes import ModuleHashValidator
except ImportError as e:
    print(f"üö® CRITICAL: Failed to import enforcement modules: {e}")
    print("Ensure all GENESIS ARCHITECT MODE files are present")
    sys.exit(1)

class GenesisArchitectMaster:
    """
    üß† GENESIS ARCHITECT MODE v6.0 MASTER CONTROLLER
    
    Orchestrates the complete activation and enforcement of
    ARCHITECT MODE across the entire GENESIS system.
    """
    
    def __init__(self, workspace_path: str):
        self.workspace_path = Path(workspace_path)
        self.agent: Optional[GenesisArchitectAgent] = None
        self.watchdog = None
        self.validator: Optional[GenesisSystemValidator] = None
        self.hash_validator: Optional[ModuleHashValidator] = None
        
        self.enforcement_active = False
        self.emergency_mode = False
        
        # Setup logging
        self._setup_logging()
        
        self.logger.info("üß† GENESIS ARCHITECT MODE v6.0 MASTER CONTROLLER INITIALIZED")
        self.logger.info(f"üìÇ Workspace: {self.workspace_path}")
    
    
        # GENESIS Phase 91 Telemetry Injection
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", {
                "module": __name__,
                "status": "running",
                "timestamp": datetime.now().isoformat(),
                "phase": "91_telemetry_enforcement"
            })
        def _setup_logging(self):
        """Setup master controller logging"""
        log_dir = self.workspace_path / "logs" / "architect_master"
        log_dir.mkdir(parents=True, exist_ok=True)
        
        log_file = log_dir / f"architect_master_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - MASTER - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger('ArchitectMaster')
    
    def activate_full_architect_mode(self):
        """üöÄ ACTIVATE FULL GENESIS ARCHITECT MODE v6.0"""
        self.logger.info("üöÄ STARTING FULL GENESIS ARCHITECT MODE v6.0 ACTIVATION")
        self.logger.info("üîê PERMANENT ENFORCER MODE ‚Äî NOT A CREATOR")
        
        try:
            # Phase 1: Pre-flight system checks
            self.logger.info("üîç PHASE 1: PRE-FLIGHT SYSTEM CHECKS")
            assert self._perform_preflight_checks():
                self.logger.critical("üíÄ PRE-FLIGHT CHECKS FAILED - ABORTING")
                return False
            
            # Phase 2: Initialize core components
            self.logger.info("‚öôÔ∏è PHASE 2: INITIALIZE CORE COMPONENTS")
            if not self._initialize_components():
                self.logger.critical("üíÄ COMPONENT INITIALIZATION FAILED - ABORTING")
                return False
            
            # Phase 3: System baseline validation
            self.logger.info("üìã PHASE 3: SYSTEM BASELINE VALIDATION")
            if not self._perform_baseline_validation():
                self.logger.critical("üíÄ BASELINE VALIDATION FAILED - ABORTING")
                return False
            
            # Phase 4: Hash integrity enforcement
            self.logger.info("üîê PHASE 4: HASH INTEGRITY ENFORCEMENT")
            if not self._enforce_hash_integrity():
                self.logger.critical("üíÄ HASH INTEGRITY ENFORCEMENT FAILED - ABORTING")
                return False
            
            # Phase 5: Activate main agent
            self.logger.info("üß† PHASE 5: ACTIVATE MAIN ARCHITECT AGENT")
            if not self._activate_main_agent():
                self.logger.critical("üíÄ MAIN AGENT ACTIVATION FAILED - ABORTING")
                return False
            
            # Phase 6: Start watchdog monitoring
            self.logger.info("üõ∞Ô∏è PHASE 6: START WATCHDOG MONITORING")
            if not self._start_watchdog_monitoring():
                self.logger.critical("üíÄ WATCHDOG START FAILED - ABORTING")
                return False
            
            # Phase 7: Final validation gate
            self.logger.info("üö¶ PHASE 7: FINAL VALIDATION GATE")
            if not self._final_validation_gate():
                self.logger.critical("üíÄ FINAL VALIDATION FAILED - ABORTING")
                return False
            
            # Phase 8: Lock in enforcement mode
            self.logger.info("üîí PHASE 8: LOCK IN ENFORCEMENT MODE")
            self._lock_enforcement_mode()
            
            self.enforcement_active = True
            self.logger.info("‚úÖ GENESIS ARCHITECT MODE v6.0 FULLY ACTIVATED")
            self.logger.info("üîê SYSTEM LOCKED IN PERMANENT ENFORCEMENT MODE")
            
            return True
            
        except Exception as e:
            self.logger.critical(f"üíÄ CRITICAL FAILURE DURING ACTIVATION: {e}")
            self._emergency_shutdown()
            return False
    
    def _perform_preflight_checks(self) -> bool:
        """üîç PERFORM PRE-FLIGHT SYSTEM CHECKS"""
        required_files = [
            "genesis_architect_agent.py",
            "genesis_watchdog.py", 
            "validate_system_compliance.py",
            "validate_module_hashes.py",
            "system_config.json",
            "system_tree.json",
            "event_bus.json",
            "build_status.json"
        ]
        
        missing_files = []
        for file_name in required_files:
            if not (self.workspace_path / file_name).exists():
                missing_files.append(file_name)
        
        if missing_files:
            self.logger.error(f"‚ùå MISSING REQUIRED FILES: {missing_files}")
            return False
        
        # Check Python version
        if sys.version_info < (3, 7):
            self.logger.error("‚ùå Python 3.7+ required")
            return False
        
        # Check workspace permissions
        if not os.access(self.workspace_path, os.R_OK | os.W_OK):
            self.logger.error("‚ùå Insufficient workspace permissions")
            return False
        
        self.logger.info("‚úÖ Pre-flight checks passed")
        return True
    
    def _initialize_components(self) -> bool:
        """‚öôÔ∏è INITIALIZE CORE COMPONENTS"""
        try:
            # Initialize system validator
            self.validator = GenesisSystemValidator(str(self.workspace_path))
            self.logger.info("‚úÖ System validator initialized")
            
            # Initialize hash validator
            self.hash_validator = ModuleHashValidator(str(self.workspace_path))
            self.logger.info("‚úÖ Hash validator initialized")
            
            # Initialize main agent
            self.agent = GenesisArchitectAgent(str(self.workspace_path))
            self.logger.info("‚úÖ Main architect agent initialized")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Component initialization failed: {e}")
            return False
      def _perform_baseline_validation(self) -> bool:
        """üìã PERFORM BASELINE SYSTEM VALIDATION"""
        try:
            if not self.validator:
                self.logger.error("‚ùå System validator not initialized")
                return False
                
            validation_results = self.validator.validate_system()
            
            if not validation_results["architect_mode_compliant"]:
                self.logger.error("‚ùå System not architect mode compliant")
                self.logger.error(f"Compliance: {validation_results['overall_compliance_percent']:.1f}%")
                self.logger.error(f"Violations: {validation_results['total_violations']}")
                
                # Try to auto-fix some issues
                if validation_results['overall_compliance_percent'] >= 70:
                    self.logger.info("üîß Attempting auto-remediation...")
                    return self._attempt_auto_remediation(validation_results)
                else is not None, "Real data required - no fallbacks allowed"
    def log_state(self):
        """Phase 91 Telemetry Enforcer - Log current module state"""
        state_data = {
            "module": __name__,
            "timestamp": datetime.now().isoformat(),
            "status": "active",
            "phase": "91_telemetry_enforcement"
        }
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", state_data)
        return state_data
        

# <!-- @GENESIS_MODULE_END: activate_architect_mode -->