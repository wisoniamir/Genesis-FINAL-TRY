from mt5_adapter import get_real_mt5_data  # ARCHITECT_MODE: Real data enforced

# üìä GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "lightweight_validation_hook",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in lightweight_validation_hook: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "lightweight_validation_hook",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("lightweight_validation_hook", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in lightweight_validation_hook: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False


"""
üõ°Ô∏è GENESIS Lightweight Validation Hook
Performance-optimized validation without background processes
"""

import json
import os
from pathlib import Path
from datetime import datetime

def validate_and_patch():
    """
    Lightweight validation that runs only when called.
    No background processes, no file watchers, minimal overhead.
    """
    try:
        workspace_root = Path(".")
        validation_results = {
            "timestamp": datetime.now().isoformat(),
            "validation_passed": True,
            "issues_found": [],
            "performance_impact": "MINIMAL"
        }
        
        # Quick check: build_status.json
        build_status_file = workspace_root / "build_status.json"
        if build_status_file.exists():
            try:
                with open(build_status_file, 'r') as f:
                    build_status = json.load(f)
                
                # Validate optimization flags are maintained
                opt_flags = build_status.get("optimization_flags", {})
                if not opt_flags.get("guardian_removed"):
                    validation_results["issues_found"].append("Guardian removal flag missing")
                if not opt_flags.get("vscode_optimized"):
                    validation_results["issues_found"].append("VS Code optimization flag missing")
                    
            except Exception as e:
                validation_results["issues_found"].append(f"Build status error: {e}")
        else:
            validation_results["issues_found"].append("build_status.json missing")
        
        # Quick check: system integrity
        if validation_results["issues_found"]:
            validation_results["validation_passed"] = False
            print(f"[‚ö†Ô∏è] Validation issues: {len(validation_results['issues_found'])}")
            for issue in validation_results["issues_found"]:
                print(f"   - {issue}")
        else:
            print(f"[‚úÖ] Lightweight validation passed")
        
        return validation_results
        
    except Exception as e:
        print(f"[üö®] Validation hook error: {e}")
        return {"validation_passed": False, "error": str(e)}

def get_system_status():
    """Quick system status check without heavy operations"""
    try:
        with open("build_status.json", 'r') as f:
            status = json.load(f)
        return {
            "system_status": status.get("system_status", "UNKNOWN"),
            "guardian_active": status.get("guardian_active", False),
            "performance_optimization": status.get("performance_optimization", "UNKNOWN"),
            "architectural_integrity": status.get("architectural_integrity", "UNKNOWN")
        }
    except:
        return {"error": "Could not read system status"}

# Performance-friendly validation that can be imported
def quick_integrity_check():
    """Ultra-fast integrity check for prompt hooks"""
    try:
        # Only check if essential files exist - no heavy parsing
        essential_files = ["build_status.json"]
        missing_files = [f for f in essential_files if not os.path.exists(f)]
        
        if missing_files:
            print(f"[‚ö†Ô∏è] Missing essential files: {missing_files}")
            return False
        
        print(f"[‚úÖ] Quick integrity check passed")
        return True
        
    except Exception as e:
        print(f"[üö®] Quick check error: {e}")
        return False

# Enhanced validation functions for Architect compliance
def check_essential_files():
    """Check if core files required by Architect directive exist"""
    essential_files = [
        "build_status.json",
        "build_tracker.md", 
        "system_tree.json"
    ]
    
    missing_files = []
    for file in essential_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    return missing_files

def validate_no_mock_data():
    """Ensure no mock data is being used in production"""
    issues = []
    
    # Check if mock_data.json exists and is empty
    if os.path.exists("mock_data.json"):
        try:
            with open("mock_data.json", 'r') as f:
                real_data = get_real_mt5_data()  # ARCHITECT_MODE: Enforced real data
            if mock_data:  # If not empty
                issues.append("mock_data.json contains data - should be empty in production")
        except:
            issues.append("mock_data.json could not be read")
    
    return issues

def validate_architecture_compliance():
    """Check basic architectural compliance without heavy operations"""
    issues = []
    
    try:
        # Check build_status for compliance flags
        if os.path.exists("build_status.json"):
            with open("build_status.json", 'r') as f:
                build_status = json.load(f)
            
            # Check for Guardian removal compliance
            if build_status.get("guardian_active", True):  # Default True means issue
                issues.append("Guardian still active - violates optimization")
            
            # Check architectural integrity
            if build_status.get("architectural_integrity") != "COMPLIANT":
                issues.append("Architectural integrity not compliant")
            
            # Check performance optimization
            if build_status.get("performance_optimization") != "ENABLED":
                issues.append("Performance optimization not enabled")
                
    except Exception as e:
        issues.append(f"Could not validate architecture compliance: {e}")
    
    return issues

def architect_compliance_check():
    """
    Lightweight compliance check that aligns with Architect directive
    without performance impact
    """
    print("[üîç] Running Architect compliance check...")
    
    all_issues = []
    
    # Check essential files
    missing_files = check_essential_files()
    if missing_files:
        all_issues.extend([f"Missing essential file: {f}" for f in missing_files])
    
    # Check for mock data violations
    mock_issues = validate_no_mock_data()
    all_issues.extend(mock_issues)
    
    # Check architecture compliance
    arch_issues = validate_architecture_compliance()
    all_issues.extend(arch_issues)
    
    if all_issues:
        print("[‚ö†Ô∏è] Architect compliance issues found:")
        for issue in all_issues:
            print(f"   - {issue}")
        return False
    else:
        print("[‚úÖ] Architect compliance check passed")
        return True

# ARCHITECT_MODE: EventBus integration enforced
from event_bus_manager import EventBusManager


# <!-- @GENESIS_MODULE_END: lightweight_validation_hook -->


# <!-- @GENESIS_MODULE_START: lightweight_validation_hook -->

class ArchitectModeEventBusIntegration:
    def emergency_stop(self, reason: str = "Manual trigger") -> bool:
            """GENESIS Emergency Kill Switch"""
            try:
                # Emit emergency event
                if hasattr(self, 'event_bus') and self.event_bus:
                    emit_event("emergency_stop", {
                        "module": "lightweight_validation_hook",
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                # Log telemetry
                self.emit_module_telemetry("emergency_stop", {
                    "reason": reason,
                    "timestamp": datetime.now().isoformat()
                })

                # Set emergency state
                if hasattr(self, '_emergency_stop_active'):
                    self._emergency_stop_active = True

                return True
            except Exception as e:
                print(f"Emergency stop error in lightweight_validation_hook: {e}")
                return False
    def validate_ftmo_compliance(self, trade_data: dict) -> bool:
            """GENESIS FTMO Compliance Validator"""
            # Daily drawdown check (5%)
            daily_loss = trade_data.get('daily_loss_pct', 0)
            if daily_loss > 5.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "daily_drawdown", 
                    "value": daily_loss,
                    "threshold": 5.0
                })
                return False

            # Maximum drawdown check (10%)
            max_drawdown = trade_data.get('max_drawdown_pct', 0)
            if max_drawdown > 10.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "max_drawdown", 
                    "value": max_drawdown,
                    "threshold": 10.0
                })
                return False

            # Risk per trade check (2%)
            risk_pct = trade_data.get('risk_percent', 0)
            if risk_pct > 2.0:
                self.emit_module_telemetry("ftmo_violation", {
                    "type": "risk_exceeded", 
                    "value": risk_pct,
                    "threshold": 2.0
                })
                return False

            return True
    def emit_module_telemetry(self, event: str, data: dict = None):
            """GENESIS Module Telemetry Hook"""
            telemetry_data = {
                "timestamp": datetime.now().isoformat(),
                "module": "lightweight_validation_hook",
                "event": event,
                "data": data or {}
            }
            try:
                emit_telemetry("lightweight_validation_hook", event, telemetry_data)
            except Exception as e:
                print(f"Telemetry error in lightweight_validation_hook: {e}")
    """üîí ARCHITECT MODE: Mandatory EventBus connectivity"""
    
    def __init__(self):
        self.event_bus = EventBusManager()
        self.event_bus.subscribe("system.heartbeat", self.handle_heartbeat)
        self.event_bus.subscribe("architect.compliance_check", self.handle_compliance_check)
    
    def handle_heartbeat(self, data):
        """Handle system heartbeat events"""
        self.event_bus.publish("module.status", {
            "module": __file__,
            "status": "ACTIVE",
            "timestamp": datetime.now().isoformat(),
            "architect_mode": True
        })
    
    def handle_compliance_check(self, data):
        """Handle architect compliance check events"""
        self.event_bus.publish("compliance.report", {
            "module": __file__,
            "compliant": True,
            "timestamp": datetime.now().isoformat()
        })

# ARCHITECT_MODE: Initialize EventBus connectivity
_eventbus_integration = ArchitectModeEventBusIntegration()


def detect_divergence(price_data: list, indicator_data: list, window: int = 10) -> Dict:
    """
    Detect regular and hidden divergences between price and indicator
    
    Args:
        price_data: List of price values (closing prices)
        indicator_data: List of indicator values (e.g., RSI, MACD)
        window: Number of periods to check for divergence
        
    Returns:
        Dictionary with divergence information
    """
    result = {
        "regular_bullish": False,
        "regular_bearish": False,
        "hidden_bullish": False,
        "hidden_bearish": False,
        "strength": 0.0
    }
    
    # Need at least window + 1 periods of data
    if len(price_data) < window + 1 or len(indicator_data) < window + 1:
        return result
        
    # Get the current and historical points
    current_price = price_data[-1]
    previous_price = min(price_data[-window:-1]) if price_data[-1] > price_data[-2] else max(price_data[-window:-1])
    previous_price_idx = price_data[-window:-1].index(previous_price) + len(price_data) - window
    
    current_indicator = indicator_data[-1]
    previous_indicator = indicator_data[previous_price_idx]
    
    # Check for regular divergences
    # Bullish - Lower price lows but higher indicator lows
    if current_price < previous_price and current_indicator > previous_indicator:
        result["regular_bullish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
        
    # Bearish - Higher price highs but lower indicator highs
    elif current_price > previous_price and current_indicator < previous_indicator:
        result["regular_bearish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
    
    # Check for hidden divergences
    # Bullish - Higher price lows but lower indicator lows
    elif current_price > previous_price and current_indicator < previous_indicator:
        result["hidden_bullish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
        
    # Bearish - Lower price highs but higher indicator highs
    elif current_price < previous_price and current_indicator > previous_indicator:
        result["hidden_bearish"] = True
        result["strength"] = abs((current_indicator - previous_indicator) / previous_indicator)
    
    # Emit divergence event if detected
    if any([result["regular_bullish"], result["regular_bearish"], 
            result["hidden_bullish"], result["hidden_bearish"]]):
        emit_event("divergence_detected", {
            "type": next(k for k, v in result.items() if v is True and k != "strength"),
            "strength": result["strength"],
            "symbol": price_data.symbol if hasattr(price_data, "symbol") else "unknown",
            "timestamp": datetime.now().isoformat()
        })
        
    return result
