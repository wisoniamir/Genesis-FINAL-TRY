
# üìä GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "validate_backtest_engine_recovered_2",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in validate_backtest_engine_recovered_2: {e}")
                    return False
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "validate_backtest_engine_recovered_2",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("validate_backtest_engine_recovered_2", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in validate_backtest_engine_recovered_2: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False


"""
BacktestEngine Validation Tool - Final Compliance Check
- Validates EventBus integration
- Verifies real data enforcement
- Checks JSONL output structure
- Confirms system file registration

This tool is used to perform the final validation of the BacktestEngine
module for compliance with the GENESIS AI TRADING BOT SYSTEM requirements.
"""

import os
import sys
import json
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt


# <!-- @GENESIS_MODULE_END: validate_backtest_engine_recovered_2 -->


# <!-- @GENESIS_MODULE_START: validate_backtest_engine_recovered_2 -->

def validate_module_file():
    """Validate backtest_engine.py file exists and has required components"""
    if not os.path.exists("backtest_engine.py"):
        print("‚ùå ERROR: backtest_engine.py file not found")
        return False
        
    print("‚úÖ backtest_engine.py file found")
    
    # Check file content for key requirements
    with open("backtest_engine.py", "r") as f:
        content = f.read()
        
    requirements = [
        ("Event Bus Import", "from event_bus import", True),
        ("No Mock Data", "NO MOCK DATA", True), 
        ("Class Definition", "class BacktestEngine", True),
        ("Real Data Enforcement", "real_data", True),
        ("JSONL Logging", "jsonl", True),
        ("Session-based Backtesting", "session", True),
        ("Win Rate Calculation", "win_rate", True),
        ("Profit Factor", "profit_factor", True),
        ("Telemetry Integration", "telemetry", True)
    ]
    
    for name, keyword, required in requirements:
        if keyword.lower() in content.lower():
            print(f"‚úÖ {name} found in file")
        elif required:
            print(f"‚ùå ERROR: {name} not found in file")
            return False
        else:
            print(f"‚ö†Ô∏è WARNING: Optional {name} not found in file")
    
    return True

def validate_system_files():
    """Validate BacktestEngine is properly registered in system files"""
    # Check the files
    system_files = {
        "system_tree.json": ["BacktestEngine", "connections", "eventbus_routes"],
        "event_bus.json": ["BacktestEngine", "BacktestResults", "ModuleTelemetry"],
        "module_registry.json": ["BacktestEngine", "active", "real_data"],
        "build_status.json": ["BacktestEngine", "step_10", "complete"]
    }
    
    for filename, required_terms in system_files.items():
        if not os.path.exists(filename):
            print(f"‚ùå ERROR: {filename} file not found")
            return False
            
        with open(filename, "r") as f:
            content = f.read()
            
        for term in required_terms:
            if term.lower() in content.lower():
                print(f"‚úÖ '{term}' found in {filename}")
            else:
                print(f"‚ùå ERROR: '{term}' not found in {filename}")
                return False
    
    return True

def validate_log_directory():
    """Validate logs/backtest_results directory exists"""
    log_path = "logs/backtest_results"
    if os.path.exists(log_path) and os.path.isdir(log_path):
        print(f"‚úÖ {log_path} directory exists")
        return True
    
    print(f"‚ùå ERROR: {log_path} directory does not exist")
    return False

def validate_event_handling():
    """Validate event handlers for required events"""
    with open("backtest_engine.py", "r") as f:
        content = f.read()
        
    required_handlers = [
        "TickData", "SignalCandidate", "PatternDetected",
        "BacktestResults", "ModuleTelemetry", "ModuleError"
    ]
    
    for handler in required_handlers:
        if handler.lower() in content.lower() and ("subscribe" in content.lower() or "register" in content.lower()):
            print(f"‚úÖ {handler} event handler found")
        else:
            print(f"‚ùå ERROR: {handler} event handler not found or not properly registered")
            return False
    
    return True

def validate_metrics_calculation():
    """Validate performance metrics calculation"""
    metrics = ["win_rate", "profit_factor", "drawdown", "r_multiple"]
    
    with open("backtest_engine.py", "r") as f:
        content = f.read()
        
    for metric in metrics:
        if metric.lower() in content.lower():
            print(f"‚úÖ {metric} calculation found")
        else:
            print(f"‚ö†Ô∏è WARNING: {metric} calculation not found")
    
    return True

def main():
    """Run all validation checks"""
    print("\nüß™ VALIDATING BACKTEST ENGINE MODULE\n")
    print("=" * 50)
    
    # Validate module file
    print("\nüìÑ VALIDATING MODULE FILE\n")
    if not validate_module_file():
        print("\n‚ùå MODULE FILE VALIDATION FAILED\n")
        return
        
    # Validate system files
    print("\nüìÅ VALIDATING SYSTEM FILES\n")
    if not validate_system_files():
        print("\n‚ùå SYSTEM FILES VALIDATION FAILED\n")
        return
        
    # Validate log directory
    print("\nüìä VALIDATING LOG DIRECTORY\n")
    if not validate_log_directory():
        print("\n‚ö†Ô∏è LOG DIRECTORY VALIDATION FAILED\n")
        # Not a critical failure
        
    # Validate event handling
    print("\nüîÑ VALIDATING EVENT HANDLING\n")
    if not validate_event_handling():
        print("\n‚ùå EVENT HANDLING VALIDATION FAILED\n")
        return
        
    # Validate metrics calculation
    print("\nüìà VALIDATING METRICS CALCULATION\n")
    validate_metrics_calculation()
    
    # Final result
    print("\n" + "=" * 50)
    print("\n‚úÖ BACKTEST ENGINE MODULE VALIDATION SUCCESSFUL")
    print("All required components found and properly integrated")
    print("\n‚úÖ STEP 10 COMPLETED SUCCESSFULLY")
    print("BacktestEngine is ready for use with GENESIS AI TRADING BOT SYSTEM")
    print("\n" + "=" * 50)

if __name__ == "__main__":
    main()

    def log_state(self):
        """Phase 91 Telemetry Enforcer - Log current module state"""
        state_data = {
            "module": __name__,
            "timestamp": datetime.now().isoformat(),
            "status": "active",
            "phase": "91_telemetry_enforcement"
        }
        if hasattr(self, 'event_bus') and self.event_bus:
            self.event_bus.emit("telemetry", state_data)
        return state_data
        