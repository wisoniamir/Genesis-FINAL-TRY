# <!-- @GENESIS_MODULE_START: validate_phase91b_dashboard_compliance -->

from datetime import datetime\nfrom event_bus import EventBus
#!/usr/bin/env python3
"""
GENESIS Phase 91-B Dashboard Validation Script
Validates that all real data has been eliminated and real-time sources are connected
"""

import json
import os
import re
from pathlib import Path

def validate_phase_91b_compliance():
    """Validate Phase 91-B dashboard compliance"""
    
    print("🔧 GENESIS Phase 91-B Dashboard Compliance Validation")
    print("=" * 60)
    
    results = {
        "self.event_bus.request('data:real_feed')_eliminated": False,
        "telemetry_bindings_present": False,
        "event_driven_architecture": False,
        "mt5_integration_ready": False,
        "real_time_sources_connected": False,
        "compliance_score": 0
    }
    
    # Test 1: Check for real data elimination
    print("\n📋 Test 1: Checking for real data elimination...")
    
    dashboard_file = "genesis_dashboard_ui.py"
    if os.path.exists(dashboard_file):
        with open(dashboard_file, 'r') as f:
            content = f.read()
            
        mock_patterns = [
            r"MetaQuotes-Demo",
            r"Demo Account", 
            r"\$10,000\.00",
            r"45ms",
            r"real|real|test|actual_data",
            r"hardcoded|execute"
        ]
        
        mock_found = False
        for pattern in mock_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                print(f"❌ Found real pattern: {pattern}")
                mock_found = True
                
        if not mock_found:
            print("✅ No real data patterns found")
            results["self.event_bus.request('data:real_feed')_eliminated"] = True
        else:
            print("❌ real data still present")
    
    # Test 2: Check telemetry bindings
    print("\n📋 Test 2: Checking telemetry bindings...")
    
    bindings_file = "telemetry_dashboard_bindings.json"
    if os.path.exists(bindings_file):
        try:
            with open(bindings_file, 'r') as f:
                bindings = json.load(f)
                
            required_bindings = [
                "stats_panel",
                "mt5_connection_panel", 
                "signal_panel",
                "trade_journal",
                "execution_control"
            ]
            
            dashboard_bindings = bindings.get("dashboard_telemetry_bindings", {}).get("binding_specifications", {})
            
            all_present = all(binding in dashboard_bindings for binding in required_bindings)
            
            if all_present:
                print("✅ All telemetry bindings present")
                results["telemetry_bindings_present"] = True
            else:
                print("❌ Missing telemetry bindings")
                
        except Exception as e:
            print(f"❌ Error reading bindings file: {e}")
    else:
        print("❌ Telemetry bindings file not found")
    
    # Test 3: Check event-driven architecture
    print("\n📋 Test 3: Checking event-driven architecture...")
    
    if os.path.exists(dashboard_file):
        with open(dashboard_file, 'r') as f:
            content = f.read()
            
        event_patterns = [
            r"event_bus\.subscribe",
            r"event_bus\.emit",
            r"data:update:",
            r"control:",
            r"system:"
        ]
        
        event_count = sum(len(re.findall(pattern, content)) for pattern in event_patterns)
        
        if event_count >= 10:  # Should have multiple event subscriptions/emissions
            print(f"✅ Event-driven architecture present ({event_count} event patterns found)")
            results["event_driven_architecture"] = True
        else:
            print(f"❌ Insufficient event-driven patterns ({event_count} found)")
    
    # Test 4: Check MT5 integration readiness
    print("\n📋 Test 4: Checking MT5 integration readiness...")
    
    mt5_files = [
        "mt5_connection_bridge.py",
        "telemetry/mt5_metrics.json"
    ]
    
    mt5_integration_ready = True
    for file_path in mt5_files:
        if os.path.exists(file_path):
            print(f"✅ {file_path} present")
        else:
            print(f"⚠️ {file_path} not found (will be created at runtime)")
            
    # Check for MT5 integration code in dashboard
    if os.path.exists(dashboard_file):
        with open(dashboard_file, 'r') as f:
            content = f.read()
            
        if "MetaTrader5" in content and "mt5." in content:
            print("✅ MT5 integration code present")
            results["mt5_integration_ready"] = True
        else:
            print("❌ MT5 integration code missing")
    
    # Test 5: Check real-time source connections
    print("\n📋 Test 5: Checking real-time source connections...")
    
    required_sources = [
        "telemetry.json",
        "execution_log.json", 
        "event_bus.json"
    ]
    
    sources_present = 0
    for source in required_sources:
        if os.path.exists(source):
            print(f"✅ {source} present")
            sources_present += 1
        else:
            print(f"❌ {source} missing")
            
    if sources_present == len(required_sources):
        results["real_time_sources_connected"] = True
    
    # Calculate compliance score
    score = sum(results.values()) - 1  # Subtract compliance_score itself
    total_tests = len(results) - 1
    results["compliance_score"] = (score / total_tests) * 100
    
    # Print final results
    print("\n" + "=" * 60)
    print("🎯 PHASE 91-B COMPLIANCE RESULTS:")
    print("=" * 60)
    
    for key, value in results.items():
        if key == "compliance_score":
            print(f"📊 {key.replace('_', ' ').title()}: {value:.1f}%")
        else:
            status = "✅ PASS" if value else "❌ FAIL"
            print(f"📋 {key.replace('_', ' ').title()}: {status}")
    
    print("\n" + "=" * 60)
    
    if results["compliance_score"] >= 80:
        print("🎯 ✅ PHASE 91-B COMPLIANCE: SUCCESSFUL")
        print("🛡️ Dashboard is Architect Mode v5.0.0 compliant")
        print("📡 Real-time feeds and event-driven architecture active")
    else:
        print("🚨 ❌ PHASE 91-B COMPLIANCE: FAILED")
        print("🔧 Additional patching required")
    
    print("=" * 60)
    
    return results

if __name__ == "__main__":
    validate_phase_91b_compliance()


# <!-- @GENESIS_MODULE_END: validate_phase91b_dashboard_compliance -->