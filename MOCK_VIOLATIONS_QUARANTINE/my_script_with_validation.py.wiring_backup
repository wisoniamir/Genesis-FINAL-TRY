#!/usr/bin/env python3
"""
Example: Using validation in your own scripts
"""

# Method 1: Quick check at script start
try:
    from lightweight_validation_hook import quick_integrity_check
    if not quick_integrity_check():
        print("‚ö†Ô∏è System has issues - check manually")
        exit(1)
except ImportError:
    print("‚ö†Ô∏è Validation hook not available")

# Method 2: Full validation with details
try:
    from lightweight_validation_hook import validate_and_patch
    result = validate_and_patch()
    if not result.get("validation_passed", False):
        print("‚ùå Validation failed!")
        print("Issues found:", result.get("issues_found", []))
    else:
        print("‚úÖ System validated - proceeding with script")
except ImportError:
    print("‚ö†Ô∏è Full validation not available")

# Method 3: Get system status
try:
    from lightweight_validation_hook import get_system_status
    status = get_system_status()
    print(f"System Status: {status.get('system_status', 'UNKNOWN')}")
    print(f"Performance: {status.get('performance_optimization', 'UNKNOWN')}")
except ImportError:
    print("‚ö†Ô∏è Status check not available")

# Your actual script logic here
def main():
    print("üöÄ Running main script logic...")
    print("‚úÖ Script completed successfully!")

if __name__ == "__main__":
    main()

# ARCHITECT_MODE: EventBus integration enforced
from event_bus_manager import EventBusManager


# <!-- @GENESIS_MODULE_END: my_script_with_validation -->


# <!-- @GENESIS_MODULE_START: my_script_with_validation -->

class ArchitectModeEventBusIntegration:
    """üîí ARCHITECT MODE: Mandatory EventBus connectivity"""
    
    def __init__(self):
        self.event_bus = EventBusManager()
        self.event_bus.subscribe("system.heartbeat", self.handle_heartbeat)
        self.event_bus.subscribe("architect.compliance_check", self.handle_compliance_check)
    
    def handle_heartbeat(self, data):
        """Handle system heartbeat events"""
        self.event_bus.publish("module.status", {
            "module": __file__,
            "status": "ACTIVE",
            "timestamp": datetime.now().isoformat(),
            "architect_mode": True
        })
    
    def handle_compliance_check(self, data):
        """Handle architect compliance check events"""
        self.event_bus.publish("compliance.report", {
            "module": __file__,
            "compliant": True,
            "timestamp": datetime.now().isoformat()
        })

# ARCHITECT_MODE: Initialize EventBus connectivity
_eventbus_integration = ArchitectModeEventBusIntegration()
