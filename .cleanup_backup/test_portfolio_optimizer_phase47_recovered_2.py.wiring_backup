# <!-- @GENESIS_MODULE_START: test_portfolio_optimizer_phase47_recovered_2 --> 
üèõÔ∏è GENESIS test_portfolio_optimizer_phase47_recovered_2 - INSTITUTIONAL GRADE v8.0.0 
================================================================ 
ARCHITECT MODE ULTIMATE: Professional-grade trading module 
 
üéØ ENHANCED FEATURES: 
- Complete EventBus integration 
- Real-time telemetry monitoring 
- FTMO compliance enforcement 
- Emergency kill-switch protection 
- Institutional-grade architecture 
 
üîê ARCHITECT MODE v8.0.0: Ultimate compliance enforcement 
 
from datetime import datetime 
import logging 
 
#!/usr/bin/env python3
"""
üîê GENESIS TRADING BOT ‚Äî PHASE 47 PORTFOLIO OPTIMIZER TEST
üìã Module: test_portfolio_optimizer_phase47.py  
üéØ Purpose: Test Phase 47 portfolio optimizer mutation engine integration
üìÖ Created: 2025-06-18
‚öñÔ∏è Compliance: ARCHITECT_MODE_V4.0
üß≠ Phase: 47
"""

import sys
import os
import json
import logging
from datetime import datetime, timezone

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from portfolio_optimizer import PortfolioOptimizer

def test_portfolio_optimizer_response():
    """Test Phase 47 portfolio optimizer mutation engine integration"""
    print("üß™ Testing Phase 47 Portfolio Optimizer Response...")
    
    # Initialize logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    try:
        # Initialize portfolio optimizer
        optimizer = PortfolioOptimizer()
        
        # Create test feedback payload
        feedback = {
            "strategy_id": "gold_alpha_v3",
            "execution_result": "partial",
            "return": 0.01,
            "timestamp": datetime.now(timezone.utc).isoformat()
        }
        
        print(f"üì§ Testing with feedback: {json.dumps(feedback, indent=2)}")
        
        # Test the mutation feedback handler
        optimizer._handle_mutation_feedback(feedback)
        
        print("‚úÖ Phase 47 portfolio optimizer test PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Phase 47 portfolio optimizer test FAILED: {e}")
        logger.error(f"Test failed: {e}")
        return False

def test_mt5_exposure_integration():
    """Test MT5 exposure data integration"""
    print("üß™ Testing MT5 Exposure Integration...")
    
    try:
        optimizer = PortfolioOptimizer()
        
        # Test exposure retrieval
        exposure = optimizer._get_current_exposure()
        assert isinstance(exposure, dict), "Exposure should be a dictionary"
        assert len(exposure) > 0, "Exposure should contain data"
        
        print(f"üìä MT5 Exposure retrieved: {json.dumps(exposure, indent=2)}")
        print("‚úÖ MT5 exposure integration test PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå MT5 exposure integration test FAILED: {e}")
        return False

def test_correlation_calculation():
    """Test correlation matrix calculation"""
    print("üß™ Testing Correlation Calculation...")
    
    try:
        optimizer = PortfolioOptimizer()
        
        # Test correlation calculation
        test_exposure = {
            "EURUSD": {"value": 2500.0, "direction": "long", "risk": 0.15},
            "GBPJPY": {"value": 1800.0, "direction": "short", "risk": 0.22},
            "XAUUSD": {"value": 3200.0, "direction": "long", "risk": 0.18}
        }
        
        correlation_matrix = optimizer._calculate_correlation(test_exposure)
        
        assert isinstance(correlation_matrix, dict), "Correlation should be a dictionary"
        assert "avg_correlation" in correlation_matrix, "Should contain avg_correlation"
        assert "max_correlation" in correlation_matrix, "Should contain max_correlation"
        
        print(f"üìä Correlation matrix: {json.dumps(correlation_matrix, indent=2)}")
        print("‚úÖ Correlation calculation test PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Correlation calculation test FAILED: {e}")
        return False

def test_risk_profile_calculation():
    """Test risk profile calculation"""
    print("üß™ Testing Risk Profile Calculation...")
    
    try:
        optimizer = PortfolioOptimizer()
        
        # Test different execution scenarios
        test_cases = [
            {"execution_result": "success", "return": 0.02, "expected_risk": "low"},
            {"execution_result": "partial", "return": 0.01, "expected_risk": "medium"},
            {"execution_result": "failed", "return": -0.01, "expected_risk": "high"}
        ]
        
        for test_case in test_cases:
            risk_profile = optimizer._get_trade_risk_profile(test_case)
            assert isinstance(risk_profile, float), "Risk profile should be a float"
            assert 0.0 <= risk_profile <= 1.0, "Risk profile should be between 0 and 1"
            
            print(f"üìà Test case: {test_case['execution_result']} -> risk: {risk_profile:.3f}")
        
        print("‚úÖ Risk profile calculation test PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Risk profile calculation test FAILED: {e}")
        return False

def test_strategy_adjustment():
    """Test strategy path adjustment"""
    print("üß™ Testing Strategy Adjustment...")
    
    try:
        optimizer = PortfolioOptimizer()
        
        # Test strategy adjustment
        test_signals = {
            "portfolio_risk": 0.7,
            "correlation_penalty": 0.3
        }
        
        optimizer._adjust_strategy_path("test_strategy_v1", test_signals)
        
        print("‚úÖ Strategy adjustment test PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Strategy adjustment test FAILED: {e}")
        return False

def validate_phase47_telemetry():
    """Validate Phase 47 telemetry metrics"""
    print("üß™ Validating Phase 47 Telemetry...")
    
    required_telemetry = [
        "optimizer.exposure_total",
        "optimizer.risk_profile", 
        "optimizer.correlation_avg"
    ]
    
    try:
        optimizer = PortfolioOptimizer()
        
        # Test telemetry emission
        test_payload = {
            "strategy_id": "test_strategy",
            "execution_result": "success",
            "return": 0.015
        }
        
        optimizer._handle_mutation_feedback(test_payload)
        
        print(f"üì° Telemetry metrics validated: {required_telemetry}")
        print("‚úÖ Phase 47 telemetry validation PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Phase 47 telemetry validation FAILED: {e}")
        return False

def main():
    """Run all Phase 47 tests"""
    print("üöÄ Starting Phase 47 Portfolio Optimizer Tests...")
    print("=" * 60)
    
    test_results = []
    
    # Run individual tests
    test_results.append(test_portfolio_optimizer_response())
    test_results.append(test_mt5_exposure_integration())
    test_results.append(test_correlation_calculation())
    test_results.append(test_risk_profile_calculation())
    test_results.append(test_strategy_adjustment())
    test_results.append(validate_phase47_telemetry())
    
    # Summary
    passed = sum(test_results)
    total = len(test_results)
    
    print("=" * 60)
    print(f"üìä Phase 47 Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ ALL PHASE 47 TESTS PASSED - Portfolio optimizer ready for deployment")
        return True
    else:
        print("‚ùå SOME PHASE 47 TESTS FAILED - Review and fix issues before proceeding")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
 
# <!-- @GENESIS_MODULE_END: test_portfolio_optimizer_phase47_recovered_2 --> 
