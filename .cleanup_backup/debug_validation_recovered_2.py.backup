# <!-- @GENESIS_MODULE_START: debug_validation_recovered_2 -->
"""
🏛️ GENESIS DEBUG_VALIDATION_RECOVERED_2 - INSTITUTIONAL GRADE v8.0.0
===============================================================
ARCHITECT MODE ULTIMATE: Enhanced via Complete Intelligent Wiring Engine

🎯 ENHANCED FEATURES:
- Complete EventBus integration
- Real-time telemetry monitoring
- FTMO compliance enforcement
- Emergency kill-switch protection
- Institutional-grade architecture

🔐 ARCHITECT MODE v8.0.0: Ultimate compliance enforcement
"""

from event_bus import EventBus

# 📊 GENESIS Telemetry Integration - Auto-injected by Complete Intelligent Wiring Engine
try:
    from core.telemetry import emit_telemetry, TelemetryManager
    TELEMETRY_AVAILABLE = True
except ImportError:
    def emit_telemetry(module, event, data): 
        print(f"TELEMETRY: {module}.{event} - {data}")
    class TelemetryManager:
        def emergency_stop(self, reason: str = "Manual trigger") -> bool:
                """GENESIS Emergency Kill Switch"""
                try:
                    # Emit emergency event
                    if hasattr(self, 'event_bus') and self.event_bus:
                        emit_event("emergency_stop", {
                            "module": "debug_validation_recovered_2",
                            "reason": reason,
                            "timestamp": datetime.now().isoformat()
                        })

                    # Log telemetry
                    self.emit_module_telemetry("emergency_stop", {
                        "reason": reason,
                        "timestamp": datetime.now().isoformat()
                    })

                    # Set emergency state
                    if hasattr(self, '_emergency_stop_active'):
                        self._emergency_stop_active = True

                    return True
                except Exception as e:
                    print(f"Emergency stop error in debug_validation_recovered_2: {e}")
                    return False
        def validate_ftmo_compliance(self, trade_data: dict) -> bool:
                """GENESIS FTMO Compliance Validator"""
                # Daily drawdown check (5%)
                daily_loss = trade_data.get('daily_loss_pct', 0)
                if daily_loss > 5.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "daily_drawdown", 
                        "value": daily_loss,
                        "threshold": 5.0
                    })
                    return False

                # Maximum drawdown check (10%)
                max_drawdown = trade_data.get('max_drawdown_pct', 0)
                if max_drawdown > 10.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "max_drawdown", 
                        "value": max_drawdown,
                        "threshold": 10.0
                    })
                    return False

                # Risk per trade check (2%)
                risk_pct = trade_data.get('risk_percent', 0)
                if risk_pct > 2.0:
                    self.emit_module_telemetry("ftmo_violation", {
                        "type": "risk_exceeded", 
                        "value": risk_pct,
                        "threshold": 2.0
                    })
                    return False

                return True
        def emit_module_telemetry(self, event: str, data: dict = None):
                """GENESIS Module Telemetry Hook"""
                telemetry_data = {
                    "timestamp": datetime.now().isoformat(),
                    "module": "debug_validation_recovered_2",
                    "event": event,
                    "data": data or {}
                }
                try:
                    emit_telemetry("debug_validation_recovered_2", event, telemetry_data)
                except Exception as e:
                    print(f"Telemetry error in debug_validation_recovered_2: {e}")
        def emit(self, event, data): pass
    TELEMETRY_AVAILABLE = False


"""
Debug the validation issue
"""
from signal_engine import SignalEngine
from datetime import datetime
from event_bus import emit_event, subscribe_to_event

# Create a debug callback to see what data the SignalEngine receives
def debug_callback(event):
    print(f"DEBUG: Received event: {event}")
    print(f"DEBUG: Event type: {type(event)}")
    print(f"DEBUG: Event keys: {list(event.keys()) if isinstance(event, dict) else 'Not a dict'}")

# Subscribe to see what's being sent
subscribe_to_event("TickData", debug_callback, "DebugListener")

# Create test data
test_tick = {
    "symbol": "EURUSD",
    "timestamp": datetime.utcnow().isoformat(),
    "bid": 1.08450,
    "ask": 1.08452,
    "volume": 1000000,
    "source": "TEST_MT5"
}

print("Sending test tick...")
emit_event("TickData", test_tick, "TestProducer")

# Test direct validation
signal_engine = SignalEngine()
direct_result = signal_engine._validate_real_tick_data(test_tick)
print(f"Direct validation result: {direct_result}")


# <!-- @GENESIS_MODULE_END: debug_validation_recovered_2 -->
