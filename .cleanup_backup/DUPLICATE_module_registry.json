{  "metadata": {    "schema_version": "2.7",
    "last_updated": "2025-06-16T18:00:00Z",
    "total_registered": 32
  },"modules": [
    {
      "name": "SmartExecutionLiveLoop",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["LiveTradeExecuted", "TradeJournalEntry", "ExecutionLog", "BacktestResults", "KillSwitchTrigger"],
      "event_output": ["ExecutionDeviationAlert", "RecalibrationRequest", "SmartLogSync", "KillSwitchTrigger", "LoopHealthMetric"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "core/smart_execution_liveloop.py",
      "registered_at": "2025-06-16T17:00:00Z",
      "last_validated": "2025-06-16T17:00:00Z",
      "eventbus_routes": [
        "ExecutionEngine -> LiveTradeExecuted -> SmartExecutionLiveLoop",
        "TradeJournalEngine -> TradeJournalEntry -> SmartExecutionLiveLoop",
        "ExecutionEngine -> ExecutionLog -> SmartExecutionLiveLoop",
        "BacktestEngine -> BacktestResults -> SmartExecutionLiveLoop",
        "RiskEngine -> KillSwitchTrigger -> SmartExecutionLiveLoop",
        "TestSmartExecutionMonitor -> LiveTradeExecuted -> SmartExecutionLiveLoop",
        "TestSmartExecutionMonitor -> TradeJournalEntry -> SmartExecutionLiveLoop",
        "TestSmartExecutionMonitor -> BacktestResults -> SmartExecutionLiveLoop",
        "SmartExecutionLiveLoop -> ExecutionDeviationAlert -> RiskEngine",
        "SmartExecutionLiveLoop -> RecalibrationRequest -> StrategyRecommenderEngine",
        "SmartExecutionLiveLoop -> SmartLogSync -> DashboardEngine",
        "SmartExecutionLiveLoop -> KillSwitchTrigger -> RiskEngine",
        "SmartExecutionLiveLoop -> LoopHealthMetric -> TelemetryCollector"
      ]
    },
    {
      "name": "TestSmartExecutionMonitor",
      "type": "test",
      "language": "Python",
      "status": "active",
      "event_input": ["ExecutionDeviationAlert", "KillSwitchTrigger", "RecalibrationRequest", "SmartLogSync", "ModuleTelemetry"],
      "event_output": ["LiveTradeExecuted", "TradeJournalEntry", "BacktestResults", "ModuleTelemetry", "PatternDetected"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "test_smart_execution_monitor.py",
      "registered_at": "2025-06-16T16:30:00Z",
      "last_validated": "2025-06-16T16:30:00Z",
      "eventbus_routes": [
        "TestSmartExecutionMonitor -> LiveTradeExecuted -> SmartExecutionMonitor",
        "TestSmartExecutionMonitor -> TradeJournalEntry -> SmartExecutionMonitor",
        "TestSmartExecutionMonitor -> BacktestResults -> SmartExecutionMonitor",
        "TestSmartExecutionMonitor -> ModuleTelemetry -> SmartExecutionMonitor",
        "TestSmartExecutionMonitor -> PatternDetected -> SmartExecutionMonitor",
        "SmartExecutionMonitor -> ExecutionDeviationAlert -> TestSmartExecutionMonitor",
        "SmartExecutionMonitor -> KillSwitchTrigger -> TestSmartExecutionMonitor",
        "SmartExecutionMonitor -> RecalibrationRequest -> TestSmartExecutionMonitor",
        "SmartExecutionMonitor -> SmartLogSync -> TestSmartExecutionMonitor"
      ]
    },
    {
      "name": "MutationSignalAdapter",
      "type": "core",
      "language": "Python",
      "status": "active",
      "event_input": ["StrategyMutationEvent", "SignalCandidate"],
      "event_output": ["MutatedSignalRequest", "MutationAdapterTelemetry"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "mutation_signal_adapter.py",
      "registered_at": "2025-06-16T14:30:00Z",
      "last_validated": "2025-06-16T14:30:00Z",
      "eventbus_routes": [
        "StrategyMutator -> StrategyMutationEvent -> MutationSignalAdapter",
        "MutationSignalAdapter -> MutatedSignalRequest -> SignalEngine",
        "MutationSignalAdapter -> MutationAdapterTelemetry -> TelemetryCollector",
        "SignalEngine -> MutatedSignalResponse -> TelemetryCollector"
      ]
    },
    {
      "name": "StrategyMutator",
      "type": "core",
      "language": "Python",
      "status": "active",
      "event_input": ["TradeOutcomeFeedback", "PnLScoreUpdate", "SignalFeedbackScore", "PatternDetected", "EnrichedTradeOutcome", "TradeClusterAnalysis", "SymbolPerformanceUpdate"],
      "event_output": ["StrategyMutationEvent", "AlphaDecayDetected", "MutationLogAppend", "MetaStrategyUpdate"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "strategy_mutator.py",
      "registered_at": "2025-06-16T14:00:00Z",
      "last_validated": "2025-06-16T14:30:00Z",
      "eventbus_routes": [
        "StrategyMutator -> StrategyMutationEvent -> PatternMetaStrategyEngine",
        "StrategyMutator -> AlphaDecayDetected -> TelemetryCollector",
        "StrategyMutator -> MutationLogAppend -> TelemetryCollector",
        "StrategyMutator -> MetaStrategyUpdate -> PatternMetaStrategyEngine"
      ]
    },
    {
      "name": "LiveFeedbackAdapter",
      "type": "core",
      "language": "Python",
      "status": "active",
      "event_input": ["TradeOutcomeFeedback", "ExecutionSnapshot", "PnLScoreUpdate"],
      "event_output": ["EnrichedTradeOutcome", "TradeClusterAnalysis", "SymbolPerformanceUpdate"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "live_feedback_adapter.py",
      "registered_at": "2025-06-16T14:00:00Z",
      "last_validated": "2025-06-16T14:30:00Z",
      "eventbus_routes": [
        "LiveFeedbackAdapter -> EnrichedTradeOutcome -> StrategyMutator",
        "LiveFeedbackAdapter -> TradeClusterAnalysis -> StrategyMutator",
        "LiveFeedbackAdapter -> SymbolPerformanceUpdate -> StrategyMutator"
      ]
    },
    {
      "name": "TestSmartMonitor",
      "type": "test",
      "language": "Python",
      "status": "active",
      "event_input": ["ExecutionDeviationAlert", "KillSwitchTrigger", "RecalibrationRequest", "SmartLogSync"],
      "event_output": ["LiveTradeExecuted", "TradeJournalEntry", "PatternDetected", "ModuleTelemetry"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "test_smart_monitor.py",
      "registered_at": "2025-06-15T20:00:00Z",
      "last_validated": "2025-06-15T20:00:00Z",
      "eventbus_routes": [
        "TestSmartMonitor -> LiveTradeExecuted -> SmartExecutionMonitor",
        "TestSmartMonitor -> TradeJournalEntry -> SmartExecutionMonitor",
        "TestSmartMonitor -> PatternDetected -> SmartExecutionMonitor",
        "TestSmartMonitor -> ModuleTelemetry -> SmartExecutionMonitor",
        "SmartExecutionMonitor -> ExecutionDeviationAlert -> TestSmartMonitor",
        "SmartExecutionMonitor -> KillSwitchTrigger -> TestSmartMonitor",
        "SmartExecutionMonitor -> RecalibrationRequest -> TestSmartMonitor",
        "SmartExecutionMonitor -> SmartLogSync -> TestSmartMonitor"
      ]
    },
    {
      "name": "ExecutionFlowTest",
      "type": "test",
      "language": "Python",
      "status": "active",
      "event_input": ["OrderStatusUpdate", "TradeBlocked", "TradeAuditLog", "ExecutionLog", "ModuleTelemetry"],
      "event_output": ["TradeRequest"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "test_trade_execution_flow.py",
      "registered_at": "2025-06-15T14:30:00Z",
      "last_validated": "2025-06-15T14:30:00Z",
      "eventbus_routes": [
        "ExecutionFlowTest -> TradeRequest -> RiskEngine",
        "ExecutionEngine -> OrderStatusUpdate -> ExecutionFlowTest",
        "RiskEngine -> TradeBlocked -> ExecutionFlowTest",
        "TradeAuditor -> TradeAuditLog -> ExecutionFlowTest",
        "ExecutionEngine -> ExecutionLog -> ExecutionFlowTest",
        "TelemetryCollector -> ModuleTelemetry -> ExecutionFlowTest"
      ]
    },
    {      "name": "SignalLoopReinforcementEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["ExecutionLog", "TradeJournalEntry", "BacktestResults", "StrategyScore"],
      "event_output": ["SignalFeedbackScore", "SignalLoopTelemetry", "SignalLoopError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "signal_loop_reinforcement_engine.py",
      "registered_at": "2025-06-16T01:00:00Z",
      "last_validated": "2025-06-16T01:00:00Z",
      "eventbus_routes": [
        "ExecutionEngine -> ExecutionLog -> SignalLoopReinforcementEngine",
        "TradeJournalEngine -> TradeJournalEntry -> SignalLoopReinforcementEngine",
        "BacktestEngine -> BacktestResults -> SignalLoopReinforcementEngine",
        "SignalLoopReinforcementEngine -> SignalFeedbackScore -> SignalEngine",
        "SignalLoopReinforcementEngine -> SignalFeedbackScore -> PatternEngine",
        "SignalLoopReinforcementEngine -> SignalLoopTelemetry -> TelemetryCollector",
        "SignalLoopReinforcementEngine -> SignalLoopError -> ErrorHandler"
      ]
    },
    {
      "name": "SignalValidator",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["SignalCandidate"],
      "event_output": ["ValidatedSignal", "SignalRejected", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "signal_validator.py",
      "registered_at": "2025-06-16T00:00:00Z",
      "last_validated": "2025-06-16T00:00:00Z",
      "eventbus_routes": [
        "SignalEngine -> SignalCandidate -> SignalValidator",
        "PatternEngine -> SignalCandidate -> SignalValidator",
        "SignalValidator -> ValidatedSignal -> ExecutionEngine",
        "SignalValidator -> ValidatedSignal -> StrategyRecommenderEngine",
        "SignalValidator -> SignalRejected -> TelemetryCollector",
        "SignalValidator -> ModuleTelemetry -> TelemetryCollector",
        "SignalValidator -> ModuleError -> ErrorHandler"
      ]
    },
    {
      "name": "SmartExecutionMonitor",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["LiveTradeExecuted", "BacktestResults", "TradeJournalEntry", "ModuleTelemetry", "PatternDetected"],
      "event_output": ["ExecutionDeviationAlert", "KillSwitchTrigger", "RecalibrationRequest", "SmartLogSync", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "smart_execution_monitor.py",
      "registered_at": "2025-06-15T23:00:00Z",
      "last_validated": "2025-06-15T23:00:00Z",
      "eventbus_routes": [
        "ExecutionEngine -> LiveTradeExecuted -> SmartExecutionMonitor",
        "BacktestEngine -> BacktestResults -> SmartExecutionMonitor",
        "TradeJournalEngine -> TradeJournalEntry -> SmartExecutionMonitor",
        "PatternEngine -> PatternDetected -> SmartExecutionMonitor",
        "TelemetryCollector -> ModuleTelemetry -> SmartExecutionMonitor",
        "SmartExecutionMonitor -> ExecutionDeviationAlert -> DashboardEngine",
        "SmartExecutionMonitor -> KillSwitchTrigger -> RiskEngine",
        "SmartExecutionMonitor -> RecalibrationRequest -> BacktestEngine",
        "SmartExecutionMonitor -> SmartLogSync -> DashboardEngine",
        "SmartExecutionMonitor -> ModuleTelemetry -> TelemetryCollector",
        "SmartExecutionMonitor -> ModuleError -> ErrorHandler"
      ]
    },
    {
      "name": "StreamlitFrontend",
      "type": "ui",
      "language": "Python",
      "status": "active",
      "event_input": ["WebDashboardUpdate", "TradeVisualization", "BacktestVisualization", "SignalPatternVisualization", "SystemHealthUpdate"],
      "event_output": [],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "dashboard_frontend.py",
      "registered_at": "2025-06-15T22:30:00Z",
      "last_validated": "2025-06-15T22:30:00Z",
      "eventbus_routes": [
        "WebDashboardUpdate -> StreamlitFrontend",
        "TradeVisualization -> StreamlitFrontend",
        "BacktestVisualization -> StreamlitFrontend",
        "SignalPatternVisualization -> StreamlitFrontend",
        "SystemHealthUpdate -> StreamlitFrontend"
      ]
    },
    {
      "name": "TradeJournalEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["ExecutionLog", "OrderStatusUpdate"],
      "event_output": ["ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "trade_journal_engine.py",
      "registered_at": "2025-06-15T18:00:00Z",
      "last_validated": "2025-06-15T18:00:00Z",
      "eventbus_routes": [
        "ExecutionLog -> TradeJournalEngine",
        "OrderStatusUpdate -> TradeJournalEngine",
        "ModuleTelemetry -> TelemetryCollector",
        "ModuleError -> ErrorHandler"
      ]
    },
    {
      "name": "PatternEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["TickData", "SignalCandidate"],
      "event_output": ["PatternDetected", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "pattern_engine.py",
      "registered_at": "2025-06-15T17:00:00Z",
      "last_validated": "2025-06-15T17:00:00Z",
      "eventbus_routes": [
        "TickData -> PatternEngine",
        "SignalCandidate -> PatternEngine",
        "PatternDetected -> Dashboard",
        "PatternDetected -> ExecutionEngine",
        "ModuleTelemetry -> TelemetryCollector",
        "ModuleError -> ErrorHandler"
      ]
    },
    {
      "name": "MarketDataFeedManager",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": [],
      "event_output": ["TickData", "ConnectionStatus", "StreamStatus", "StreamError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "market_data_feed_manager.py",
      "registered_at": "2025-06-15T12:00:00Z",
      "last_validated": "2025-06-15T12:00:00Z",
      "eventbus_routes": [        "TickData -> PatternEngine",
        "TickData -> BacktestEngine", 
        "TickData -> Dashboard",
        "ConnectionStatus -> SystemMonitor"
      ]
    },
    {
      "name": "SignalEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["TickData"],
      "event_output": ["SignalCandidate", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "signal_engine.py",
      "registered_at": "2025-06-15T13:00:00Z",
      "last_validated": "2025-06-15T13:00:00Z",
      "eventbus_routes": [
        "TickData -> SignalEngine",
        "SignalCandidate -> PatternEngine",
        "SignalCandidate -> BacktestEngine",
        "SignalCandidate -> Dashboard",
        "ModuleTelemetry -> TelemetryCollector",
        "ModuleError -> ErrorHandler"
      ]
    },
    {
      "name": "RiskEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["TickData", "TradeState"],
      "event_output": ["KillSwitchActivated", "TradeBlocked"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "risk_engine.py",
      "registered_at": "2025-06-15T14:00:00Z",
      "last_validated": "2025-06-15T14:00:00Z",
      "eventbus_routes": [
        "TickData -> RiskEngine",
        "TradeState -> RiskEngine",
        "KillSwitchActivated -> Dashboard",
        "TradeBlocked -> Dashboard"
      ]    },
    {
      "name": "ExecutionEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["TradeRequest", "TradeBlocked"],
      "event_output": ["OrderStatusUpdate", "ExecutionLog", "OrderError", "ValidateTrade", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "execution_engine.py",
      "registered_at": "2025-06-15T15:00:00Z",
      "last_validated": "2025-06-15T15:00:00Z",
      "eventbus_routes": [
        "TradeRequest -> ExecutionEngine",
        "TradeBlocked -> ExecutionEngine",
        "OrderStatusUpdate -> Dashboard",
        "ExecutionLog -> Dashboard",
        "OrderError -> ErrorHandler",
        "ValidateTrade -> RiskEngine",
        "ModuleTelemetry -> TelemetryCollector",
        "ModuleError -> ErrorHandler"
      ]    },
    {
      "name": "TelemetryCollector",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["ModuleTelemetry", "ModuleError", "ExecutionLog", "OrderStatusUpdate", "KillSwitchActivated", "TradeBlocked"],
      "event_output": [],
      "telemetry": false,
      "compliance": true,
      "real_data": true,
      "file_path": "telemetry_collector.py",
      "registered_at": "2025-06-15T16:00:00Z",
      "last_validated": "2025-06-15T16:00:00Z",
      "eventbus_routes": [
        "ModuleTelemetry -> TelemetryCollector",
        "ModuleError -> TelemetryCollector",
        "ExecutionLog -> TelemetryCollector",
        "OrderStatusUpdate -> TelemetryCollector",
        "KillSwitchActivated -> TelemetryCollector",
        "TradeBlocked -> TelemetryCollector"
      ]    },
    {      "name": "StrategyRecommenderEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["ValidatedSniperSignal", "MacroUpdateEvent", "RiskExposureUpdate"],
      "event_output": ["StrategyRecommendation", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "strategy_recommender_engine.py",
      "registered_at": "2025-06-15T19:00:00Z",
      "last_validated": "2025-06-15T15:40:00Z",
      "eventbus_routes": [
        "ValidatedSniperSignal -> StrategyRecommenderEngine",
        "MacroUpdateEvent -> StrategyRecommenderEngine",
        "RiskExposureUpdate -> StrategyRecommenderEngine",
        "StrategyRecommendation -> ExecutionEngine",
        "StrategyRecommendation -> Dashboard",
        "ModuleTelemetry -> TelemetryCollector",
        "ModuleError -> TelemetryCollector"
      ]
    },
    {
      "name": "BacktestEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["TickData", "SignalCandidate", "PatternDetected"],      "event_output": ["BacktestResults", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "backtest_engine.py",
      "registered_at": "2025-06-15T20:00:00Z",
      "last_validated": "2025-06-15T20:00:00Z",
      "eventbus_routes": [
        "TickData -> BacktestEngine",
        "SignalCandidate -> BacktestEngine",
        "PatternDetected -> BacktestEngine",
        "BacktestResults -> Dashboard",
        "ModuleTelemetry -> TelemetryCollector",
        "ModuleError -> ErrorHandler"
      ]
    },
    {
      "name": "DashboardEngine",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["BacktestResults", "SignalCandidate", "PatternDetected", "StrategySuggestion", "TradeJournalEntry", "ModuleTelemetry", "ModuleError"],
      "event_output": ["DashboardStatusUpdate", "DashboardTelemetry", "DashboardError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "dashboard_engine.py",
      "registered_at": "2025-06-15T22:00:00Z",
      "last_validated": "2025-06-15T22:30:00Z",
      "eventbus_routes": [
        "BacktestResults -> DashboardEngine",
        "SignalCandidate -> DashboardEngine",
        "PatternDetected -> DashboardEngine",
        "StrategySuggestion -> DashboardEngine",
        "TradeJournalEntry -> DashboardEngine",
        "ModuleTelemetry -> DashboardEngine",
        "ModuleError -> DashboardEngine",
        "DashboardStatusUpdate -> UIFrontend",
        "DashboardTelemetry -> TelemetryCollector",
        "DashboardError -> ErrorHandler"
      ]
    },
    {
      "name": "TradeAuditor",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["OrderStatusUpdate", "TickData", "TradeClosed"],
      "event_output": ["TradeAuditLog", "TradeClosed", "TradeFillStatus", "PnLSnapshot"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "trade_auditor.py",
      "registered_at": "2025-06-16T03:00:00Z",
      "last_validated": "2025-06-16T03:00:00Z",
      "eventbus_routes": [
        "ExecutionEngine -> OrderStatusUpdate -> TradeAuditor",
        "MarketDataFeedManager -> TickData -> TradeAuditor",
        "ExecutionEngine -> TradeClosed -> TradeAuditor",
        "TradeAuditor -> TradeAuditLog -> TelemetryCollector",
        "TradeAuditor -> TradeClosed -> ExecutionEngine",
        "TradeAuditor -> TradeFillStatus -> DashboardEngine",
        "TradeAuditor -> PnLSnapshot -> RiskEngine"
      ]
    },
    {
      "name": "PatternMiner",
      "type": "engine",
      "language": "Python",
      "status": "active",
      "event_input": ["TradeAuditLog"],
      "event_output": ["PatternTag", "StrategyScore", "InvalidPatternLog", "ModuleTelemetry"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "pattern_miner.py",
      "registered_at": "2025-06-16T04:00:00Z",
      "last_validated": "2025-06-16T04:00:00Z",
      "eventbus_routes": [
        "TradeAuditor -> TradeAuditLog -> PatternMiner",
        "PatternMiner -> PatternTag -> TradeJournalEngine",
        "PatternMiner -> StrategyScore -> SignalLoopReinforcementEngine",
        "PatternMiner -> InvalidPatternLog -> TelemetryCollector",
        "PatternMiner -> ModuleTelemetry -> TelemetryCollector"
      ]
    },
    {
      "name": "SignalBiasDashboard",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["SignalFeedbackScore", "StrategyScore", "InvalidPatternLog"],
      "event_output": ["SignalBiasChartData", "DashboardTelemetry"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "signal_bias_dashboard.py",
      "registered_at": "2025-06-16T06:00:00Z",
      "last_validated": "2025-06-16T06:00:00Z",
      "eventbus_routes": [
        "SignalLoopReinforcementEngine -> SignalFeedbackScore -> SignalBiasDashboard",
        "PatternMiner -> StrategyScore -> SignalBiasDashboard",
        "PatternMiner -> InvalidPatternLog -> SignalBiasDashboard",
        "SignalBiasDashboard -> SignalBiasChartData -> DashboardEngine",
        "SignalBiasDashboard -> DashboardTelemetry -> TelemetryCollector"
      ]
    },
    {
      "name": "StrategyFeedbackJournal",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["StrategyScore", "SignalFeedbackScore"],
      "event_output": ["StrategyMutationLog", "StrategyHealthReport", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "strategy_feedback_journal.py",
      "registered_at": "2025-06-16T06:00:00Z",
      "last_validated": "2025-06-16T06:00:00Z",
      "eventbus_routes": [
        "PatternMiner -> StrategyScore -> StrategyFeedbackJournal",
        "SignalLoopReinforcementEngine -> SignalFeedbackScore -> StrategyFeedbackJournal",
        "StrategyFeedbackJournal -> StrategyMutationLog -> TelemetryCollector",
        "StrategyFeedbackJournal -> StrategyHealthReport -> DashboardEngine",
        "StrategyFeedbackJournal -> ModuleTelemetry -> TelemetryCollector",
        "StrategyFeedbackJournal -> ModuleError -> ErrorHandler"
      ]
    },
    {
      "name": "LiveTradeFeedbackInjector",
      "type": "service",
      "language": "Python",
      "status": "active",
      "event_input": ["ExecutionSnapshot", "SL_HitEvent", "TP_HitEvent", "TradeFillEvent"],
      "event_output": ["TradeOutcomeFeedback", "ReinforceSignalMemory", "PnLScoreUpdate", "TradeMetaLogEntry", "ModuleTelemetry", "ModuleError"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "live_trade_feedback_injector.py",
      "registered_at": "2025-06-16T12:00:00Z",
      "last_validated": "2025-06-16T12:00:00Z",
      "phase_12_module": true,
      "description": "PHASE 12 Live Trade Feedback Injection Engine - Real-time trade outcome feedback into signal learning ecosystem",
      "eventbus_routes": [
        "ExecutionEngine -> ExecutionSnapshot -> LiveTradeFeedbackInjector",
        "ExecutionEngine -> SL_HitEvent -> LiveTradeFeedbackInjector",
        "ExecutionEngine -> TP_HitEvent -> LiveTradeFeedbackInjector",
        "ExecutionEngine -> TradeFillEvent -> LiveTradeFeedbackInjector",
        "LiveTradeFeedbackInjector -> TradeOutcomeFeedback -> SignalLoopReinforcementEngine",
        "LiveTradeFeedbackInjector -> ReinforceSignalMemory -> SignalLoopReinforcementEngine",
        "LiveTradeFeedbackInjector -> PnLScoreUpdate -> SignalLoopReinforcementEngine",
        "LiveTradeFeedbackInjector -> TradeMetaLogEntry -> TelemetryCollector"
      ]
    },
    {
      "name": "MetaSignalHarmonizer",
      "type": "core_service",
      "language": "Python",
      "status": "active",
      "event_input": ["SignalConfidenceRated", "PatternSignalDetected", "LiveExecutionFeedback", "TradeJournalEntry"],
      "event_output": ["UnifiedExecutionSignal", "MetaSignalAuditTrail", "SignalConflictDetected", "SignalHarmonyMetric"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "core/meta_signal_harmonizer.py",
      "registered_at": "2025-06-16T18:00:00Z",
      "last_validated": "2025-06-16T18:00:00Z",
      "eventbus_routes": [
        "SignalConfidenceRatingEngine -> SignalConfidenceRated -> MetaSignalHarmonizer",
        "PatternMetaStrategyEngine -> PatternSignalDetected -> MetaSignalHarmonizer",
        "SmartExecutionLiveLoop -> LiveExecutionFeedback -> MetaSignalHarmonizer",
        "TradeJournalEngine -> TradeJournalEntry -> MetaSignalHarmonizer",
        "MetaSignalHarmonizer -> UnifiedExecutionSignal -> ExecutionEngine",
        "MetaSignalHarmonizer -> MetaSignalAuditTrail -> RiskEngine",
        "MetaSignalHarmonizer -> SignalConflictDetected -> TelemetryCollector",
        "MetaSignalHarmonizer -> SignalHarmonyMetric -> DashboardEngine"
      ],
      "version": "1.0",
      "phase": 18
    },
    {
      "name": "SmartExecutionReactor",
      "type": "core",
      "language": "Python",
      "status": "active",
      "event_input": ["ExecutionDeviationAlert", "RecalibrationRequest", "KillSwitchTrigger", "TerminateMonitorLoop"],
      "event_output": ["TradeAdjustmentInitiated", "StrategyFreezeLock", "MacroSyncReboot", "ModuleTelemetry"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "smart_execution_reactor.py",
      "registered_at": "2025-06-16T18:30:00Z",
      "last_validated": "2025-06-16T18:30:00Z",
      "eventbus_routes": [
        "SmartExecutionMonitor -> ExecutionDeviationAlert -> SmartExecutionReactor",
        "SmartExecutionMonitor -> RecalibrationRequest -> SmartExecutionReactor", 
        "SmartExecutionMonitor -> KillSwitchTrigger -> SmartExecutionReactor",
        "SmartExecutionMonitor -> TerminateMonitorLoop -> SmartExecutionReactor",
        "SmartExecutionReactor -> TradeAdjustmentInitiated -> ExecutionLoopResponder",
        "SmartExecutionReactor -> StrategyFreezeLock -> ExecutionLoopResponder",
        "SmartExecutionReactor -> MacroSyncReboot -> ExecutionLoopResponder",
        "SmartExecutionReactor -> ModuleTelemetry -> TelemetryCollector"
      ]
    },
    {
      "name": "ExecutionLoopResponder",
      "type": "service",
      "language": "Python", 
      "status": "active",
      "event_input": ["TradeAdjustmentInitiated", "StrategyFreezeLock", "MacroSyncReboot", "RecalibrationSuccessful", "LogSyncComplete", "ShutdownResponder"],
      "event_output": ["TradeAdjustmentExecuted", "StrategyFreezeConfirmed", "MacroSyncInitiated", "MacroSyncCompleted", "ModuleTelemetry"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "execution_loop_responder.py",
      "registered_at": "2025-06-16T18:30:00Z",
      "last_validated": "2025-06-16T18:30:00Z",
      "eventbus_routes": [
        "SmartExecutionReactor -> TradeAdjustmentInitiated -> ExecutionLoopResponder",
        "SmartExecutionReactor -> StrategyFreezeLock -> ExecutionLoopResponder",
        "SmartExecutionReactor -> MacroSyncReboot -> ExecutionLoopResponder",
        "ExecutionLoopResponder -> TradeAdjustmentExecuted -> ExecutionEngine",
        "ExecutionLoopResponder -> StrategyFreezeConfirmed -> RiskEngine",
        "ExecutionLoopResponder -> MacroSyncInitiated -> TelemetryCollector",
        "ExecutionLoopResponder -> MacroSyncCompleted -> TelemetryCollector",
        "ExecutionLoopResponder -> ModuleTelemetry -> TelemetryCollector"
      ]
    },
    {
      "name": "LiveAlertBridge",
      "type": "service", 
      "language": "Python",
      "status": "active",
      "event_input": ["ExecutionDeviationAlert", "KillSwitchTrigger", "RecalibrationRequest", "TerminateMonitorLoop", "TradeAdjustmentInitiated", "StrategyFreezeLock", "MacroSyncReboot", "ShutdownAlertBridge"],
      "event_output": ["DashboardAlert", "AlertTelemetry", "EmergencyAlert", "ModuleTelemetry"],
      "telemetry": true,
      "compliance": true,
      "real_data": true,
      "file_path": "live_alert_bridge.py", 
      "registered_at": "2025-06-16T18:30:00Z",
      "last_validated": "2025-06-16T18:30:00Z",
      "eventbus_routes": [
        "SmartExecutionMonitor -> ExecutionDeviationAlert -> LiveAlertBridge",
        "SmartExecutionMonitor -> KillSwitchTrigger -> LiveAlertBridge",
        "SmartExecutionMonitor -> RecalibrationRequest -> LiveAlertBridge",
        "SmartExecutionMonitor -> TerminateMonitorLoop -> LiveAlertBridge",
        "SmartExecutionReactor -> TradeAdjustmentInitiated -> LiveAlertBridge",
        "SmartExecutionReactor -> StrategyFreezeLock -> LiveAlertBridge",
        "SmartExecutionReactor -> MacroSyncReboot -> LiveAlertBridge",
        "LiveAlertBridge -> DashboardAlert -> DashboardEngine",
        "LiveAlertBridge -> AlertTelemetry -> TelemetryCollector",
        "LiveAlertBridge -> EmergencyAlert -> RiskEngine",
        "LiveAlertBridge -> ModuleTelemetry -> TelemetryCollector"
      ]
    }
  ],
  "registration_queue": [],
  "deprecated_modules": [],
  "compliance_status": {
    "all_registered": true,
    "eventbus_connected": true,
    "real_data_only": true
  }
}
